##################################################################
# Copyright 2018 CBSD Project Authors. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
#################################################################

#################################################################
# Readme file for generating X.509 RSA certificates for test labs for FCC part 96 testing of CBSD UUT and Domain Proxy UUT
# Version 1.4 28-April-2018
# Idan Raz iraz@airspan.com
##################################################################

###################################################################
# Used with OpenSSL openssl-1.0.1e-57.el6.x86_64 on CentOS 6.9 x86_64 kernel 2.6.32-696.16.1.el6.x86_64
# According to Document WINNF-17-S-0022 "WInnForum CBRS Certificate Policy Specification", Version 1.1.0, 11-Dec-2017 
# 
# openssl.cnf file is modified to meet requirements in WINNF-17-S-0022 for X.509 certificate generation
# opensslcbrs1.cnf is the modified file to be used
# Modifications are
#   1) changing definitions of [ req ], [ v3_ca ]
#   2) adding new extension sections for CBRS [ cbrs_domain_proxy_ca ], [ cbrs_sas_ca ], [ cbrs_cbsd_mfr_ca ], [ professional_installer_ca ], [ sas_cert ], [ sas_cert_with_crl ], [ cbsd_cert ], [ domain_proxy_cert ], [ cpi_cert ]   
###################################################################

###################################################################
# OpenSSL commands used for X.509 RSA certificate generation:
# 1) generate RSA private key. <key size> is 2048 bit or 4096 bit :
# openssl genrsa -out <private key file name> <key size>      
# 
# 2) create Root CA associated with the private key :
# openssl req -new -x509 -key <private key file name> -out <Root CA file name> -days <number of days for certificate validity> -config <openssl.cnf file to use>         
#
# 3) create CSR (Certificate Signing Request)associated with the private key : 
# openssl req -new -key <private key file name> -out <CSR file name> -config <openssl.cnf file to use> 
#
# 4) signing a CSR with a CA certificate :   
# openssl x509 -req -in <CSR file name> -CA <file name of CA certificate signing the CSR> -CAkey <private key of the CA certificate signing the CSR> -CAcreateserial -out <certificate file name> -days <number of days for certificate validity> <-sha256 OR -sha384> -extfile <openssl.cnf file to use> -extensions <extension section to use in the openssl.cnf file to use>
#           
# 5) verify certificate parameters :
# openssl x509 -in <certificate file name> -text -noout

###################################################################
# Actions for CBRS X.509 certificates the test lab needs to do
   
# Test lab generates a Root CA and PKI chain for itself (each test lab effectively has a different PKI chain).
# CBRS PKI X.509 RSA certificates to be generated by Test Lab:
#   1) CBRS Root CA  (the test lab creates a Root CA for itself)
#   2) SAS Provider CA  
#   3) SAS Provider Unknown CA (for negative security test cases)
#   4) Domain Proxy CA
#   5) CBSD Manufacturer CA
#   6) SAS Provider certificate (for SAS Test Harness regular testing)
#   7) SAS Provider certificate of Unknown CA  (for negative security test cases)
#   8) SAS Provider certificate with expired validity time (for negative security test cases)
#   9) SAS Provider certificate with CRL extensions (for negative security test cases)
#
# CBRS PKI X.509 RSA certificates to be signed by Test Lab and send to UUT vendor:
#   1) CBSD UUT (for vendor of CBSD as UUT)
#   2) Domain Proxy UUT (for vendor of Domain Proxy as UUT)
################################################################### 

########################################################################
# All files generated using the openssl commands below are in PEM format
# file name convention: private key file name has <file name>.key  , CSR (Certificate Signing Request) file name has <file name>.csr   , certificate file name has <file name>.pem  
#########################################################################  

########################################################################
# The machine running the openssl commands must be synchronized UTC time (for example via NTP)
# this is so the X.509 generated certificates will have correct validity timestamps
# Before starting the X.509 certificate generation verify your machine with openssl is showing correct and accurate Date and Time Of Day   
#########################################################################  
 
###################################################################
# First action for test lab is to generate its own Root CA
###################################################################   
   
Step 1) generate RSA private key for CBRS Root CA

openssl genrsa -out rootcapriv.key 4096

Step 2) create Root CA associated with the private key

openssl req -new -x509 -key rootcapriv.key -out cbrs_ca1.pem -days 365 -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:WInnForum
Organizational Unit Name (eg, section) []:RSA ROOT CA9001
Common Name (eg, your name or your server's hostname) []:WInnForum RSA Root CA

Step 3) verify Root CA parameters

openssl x509 -in cbrs_ca1.pem -text -noout
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 15919908440001837251 (0xdceee060ff0d78c3)
    Signature Algorithm: sha384WithRSAEncryption
        Issuer: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Validity
            Not Before: Jan 28 15:51:02 2018 GMT
            Not After : Jan 28 15:51:02 2019 GMT
        Subject: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:cf:94:03:bf:d1:fe:86:44:b6:d9:b3:4b:21:c1:
                    da:66:1e:20:f2:5a:6e:32:0f:5c:cf:4a:a7:ff:da:
                    b6:7c:73:d6:59:03:ef:95:01:f6:46:12:84:b6:c9:
                    2d:56:c9:53:4e:5b:fa:1e:54:a6:20:d3:c6:6d:2d:
                    bc:0c:f9:68:d3:87:58:73:a7:02:65:93:04:8d:3a:
                    e7:18:40:1e:67:db:c1:10:00:cc:d0:58:8b:04:8b:
                    e7:8c:71:3b:4e:7a:a0:c0:55:4c:1e:db:f2:66:6e:
                    9d:50:03:af:09:b3:e1:b9:58:b9:ba:c5:39:20:18:
                    89:85:51:dc:7b:48:1d:6c:d4:60:69:37:66:2e:4b:
                    1b:91:82:75:2f:ab:10:40:1c:26:7b:42:28:1c:92:
                    01:36:cc:cc:fe:a1:3a:c8:e9:79:96:b6:b3:95:29:
                    bc:7f:4d:ba:28:93:a4:07:79:c4:6c:21:35:3d:75:
                    f6:0f:a7:01:00:29:03:e4:b7:a1:fa:0f:f9:b0:e6:
                    06:fd:ef:69:20:0e:6d:f7:f1:7b:13:e0:19:47:be:
                    9a:ce:72:14:f1:e7:c0:82:c9:0b:60:f4:c1:eb:fd:
                    6f:4c:47:85:b6:8f:b0:05:77:dd:74:2b:91:c3:b1:
                    36:b3:b1:66:77:7e:0f:06:e0:5e:00:0d:8e:88:dd:
                    bb:69:54:6b:a8:91:a9:6e:61:91:4e:43:d2:e1:52:
                    db:b2:f2:a6:92:9a:6a:14:db:17:b3:6a:38:e8:22:
                    70:5b:74:e2:8d:05:ec:f5:75:a3:0c:f6:6c:f8:2a:
                    af:f7:64:0b:30:c7:ff:e5:07:02:bb:41:6d:10:b4:
                    1e:35:d8:49:2f:c2:26:71:f4:68:7d:b7:18:3d:fb:
                    8d:85:36:0e:79:0e:3f:38:a7:e7:98:6b:57:ce:3b:
                    21:0c:c0:3b:9d:6f:38:ea:39:30:fc:1d:df:53:91:
                    7d:7a:ae:64:26:23:3b:5d:75:64:aa:b4:4c:43:7d:
                    74:52:bc:d6:db:32:5b:5b:07:d9:f2:7d:4f:63:b1:
                    58:85:c2:5f:0b:d8:92:42:38:26:50:04:87:8d:f2:
                    70:cf:0f:2e:10:f9:26:36:27:58:3c:21:4f:14:c2:
                    16:a9:ee:37:ed:c8:dc:f1:15:86:cd:5b:38:a3:3b:
                    d3:32:0d:a1:4d:eb:32:04:04:25:e7:88:f9:08:ca:
                    a3:b9:e7:a6:cf:f7:18:e7:b3:16:ed:59:c9:87:2c:
                    d6:b8:6c:77:16:f0:3e:12:fa:5a:d0:c3:e3:24:1b:
                    d5:72:2c:18:6b:e2:0f:8f:f4:f0:17:79:d1:9f:58:
                    fe:32:d3:09:72:f9:9a:3b:46:76:ae:29:20:4e:1f:
                    5a:0a:21
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8
            X509v3 Authority Key Identifier: 
                keyid:0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8

            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
    Signature Algorithm: sha384WithRSAEncryption
         1e:8a:5a:a5:f0:68:9e:b3:27:f2:2f:e4:b8:e6:e4:67:1c:fd:
         7f:e0:a9:5a:d8:18:fb:f9:f0:10:c2:76:b9:3d:d9:51:b6:aa:
         04:5d:94:80:af:f6:1c:cf:24:97:34:1d:7a:97:7a:60:17:9e:
         29:2e:3d:8d:03:65:50:f0:02:7d:1a:c4:12:77:a9:9f:e0:0d:
         80:07:01:ec:58:46:4d:2b:f5:a7:17:77:60:ce:62:3a:54:ba:
         61:7f:99:a5:79:e4:9a:8c:c5:35:af:45:59:77:38:05:6e:99:
         93:22:e2:5b:3c:b7:a0:37:a4:c2:bf:6e:0d:fa:e8:60:b0:d6:
         b9:9e:e6:10:fa:e8:82:d1:2f:19:a0:f3:01:4e:70:71:82:a9:
         71:0f:3d:d4:d2:fb:28:67:fe:a5:ba:93:68:50:c4:3e:86:59:
         76:c0:a6:50:55:2b:42:df:78:81:56:ce:49:00:52:a8:6d:6e:
         b4:eb:a4:da:bd:f6:dc:33:7e:23:8f:14:5b:0c:f5:8e:fe:c2:
         b9:e8:6d:0a:79:6a:1b:da:84:d4:79:8f:30:01:76:fe:9b:79:
         35:3c:95:07:76:9d:7d:bf:43:51:2e:b0:7f:65:4c:b8:01:97:
         2d:a2:32:7a:b8:fc:12:af:db:27:94:b6:af:f3:f9:9e:16:c9:
         73:c0:50:3e:a8:ce:98:26:c0:13:89:83:b4:07:bc:ad:7f:09:
         83:1a:03:04:0c:0a:6e:bb:70:78:3e:25:22:66:5f:b3:3a:bd:
         5f:5e:92:f0:6e:fc:cc:2d:83:bb:fe:3a:e8:68:9b:8a:d4:4b:
         84:66:a2:f7:5e:ae:ee:de:47:b8:cc:69:b0:fb:bf:f8:8f:2f:
         a0:a1:4e:25:18:50:dd:90:37:43:a5:17:b7:2a:ec:1d:78:37:
         38:bf:b2:48:44:5c:74:eb:9a:1a:a1:f7:55:5e:1a:88:3f:5e:
         57:96:0d:b4:05:5d:83:2b:1f:67:96:15:2d:a5:bd:7f:73:e9:
         44:a4:49:53:2e:96:ab:bd:72:d7:0e:f3:d6:87:60:e3:4a:42:
         39:4c:74:cd:22:7e:bb:3b:e6:74:da:06:c2:ed:18:46:08:c1:
         1f:1c:5e:a1:ad:54:6a:36:50:96:8d:18:f9:39:03:56:12:08:
         c1:8a:c6:9f:95:6f:b7:57:6b:56:b3:96:fc:bc:ac:ae:38:23:
         0c:52:67:56:fd:91:b9:5a:be:7d:5f:cc:6c:cb:95:d2:78:f8:
         a3:04:d3:75:94:1f:5d:d7:5a:0b:f9:f5:6b:55:89:31:47:52:
         37:7f:c7:7c:9a:11:8b:5d:04:cb:80:a5:6a:4a:6b:dc:ca:1d:
         39:59:c3:90:51:06:9f:ec

######################################################################################################################
# Second action for test lab is to generate the various sub-CAs which will be signed by the Root CA in previous action
# sub-CAs required are: SAS Provider CA, CBSD Manufacturer CA, Domain Proxy CA, SAS Provider Unknown CA (for negative security test cases), Professional Installer CA
# in the OpenSSL commands for next steps take note of the -extensions pointing to the correct extension configuration for each certificate type
######################################################################################################################   

Step 4) generate RSA private key for SAS Provider CA

openssl genrsa -out sascapriv.key 4096

Step 5) generate a CSR for SAS Provider CA 

openssl req -new -key sascapriv.key -out sascacsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:RSA SAS Provider CA9001
Common Name (eg, your name or your server's hostname) []:WInnForum RSA SAS Provider CA

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:		 

Step 6) sign the CSR of SAS Provider CA with Root CA

openssl x509 -req -in sascacsr.csr -CA cbrs_ca1.pem -CAkey rootcapriv.key -CAcreateserial -out sascacert.pem -days 365 -sha384 -extfile /home/opensslcbrs1.cnf -extensions cbrs_sas_ca
 
Step 7) verify SAS Provider CA parameters

openssl x509 -in sascacert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 16518306035915679252 (0xe53ccfd269f1e614)
    Signature Algorithm: sha384WithRSAEncryption
        Issuer: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Validity
            Not Before: Jan 29 08:57:18 2018 GMT
            Not After : Jan 29 08:57:18 2019 GMT
        Subject: C=US, O=Airspan Networks, OU=RSA SAS Provider CA9001, CN=WInnForum RSA SAS Provider CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:e4:2d:fe:01:42:3f:22:66:27:68:bd:28:bc:e0:
                    90:6b:d7:ca:cc:f0:6e:77:65:e2:c3:39:6b:58:c5:
                    5c:24:9b:9c:56:0d:18:e4:12:d2:8a:7c:87:6f:79:
                    2a:fa:26:6e:b2:8d:c6:63:02:af:8e:4a:bb:7a:82:
                    7d:14:d4:32:d9:a0:96:ed:34:2e:2c:ff:2c:83:c2:
                    40:c3:6c:d3:e4:55:8e:08:82:65:6d:4f:b9:9b:43:
                    fb:ec:28:74:79:1f:04:93:58:c2:f4:73:67:b2:06:
                    81:05:03:99:ad:15:b5:07:31:db:52:39:c5:71:bf:
                    6d:03:4e:a1:59:e0:30:2b:e0:fa:4d:ba:c6:96:b0:
                    58:e1:a6:7d:2c:e7:f1:d3:90:f3:17:f8:1e:a4:97:
                    18:33:03:ba:64:e8:eb:0b:63:b9:ad:f9:09:ae:10:
                    99:a7:b0:a1:41:c0:a7:8d:70:4f:61:f6:28:78:79:
                    e8:fe:8c:76:f0:5c:01:48:22:48:eb:51:3d:bc:f1:
                    a2:8e:32:50:08:cc:52:69:cf:2f:b5:d4:d4:86:43:
                    43:d3:2e:6d:eb:be:eb:eb:55:46:b1:6f:70:10:8b:
                    33:e3:38:cc:3b:e1:d1:99:91:8c:ac:c8:8d:8a:37:
                    fc:39:7f:4c:9b:b0:88:b7:5c:98:86:fe:ed:d3:4e:
                    32:df:18:37:58:47:9d:1e:b5:fa:52:be:62:df:ce:
                    0a:7f:b3:b8:d8:15:72:a3:8b:03:1f:a3:69:e0:62:
                    ca:45:00:ac:ef:75:b6:e1:a2:e7:7c:01:67:56:eb:
                    03:be:10:35:fd:96:77:ad:64:c0:d5:f4:20:8c:03:
                    ea:6c:ad:b0:e9:a0:a2:77:cb:70:ad:ec:2d:28:65:
                    e2:fb:9b:90:d5:1e:29:58:dc:e9:49:23:a8:4d:e5:
                    a6:17:48:02:f4:a3:ad:85:03:33:2c:4c:ca:02:0f:
                    57:6d:ab:8b:f6:8f:89:d8:e6:2e:13:a3:66:e1:5f:
                    5d:29:6c:8c:01:66:c6:d0:a7:cf:79:91:e8:ad:cc:
                    a1:f4:8d:40:ad:fd:33:ea:c6:b5:20:2a:c4:6c:44:
                    29:f4:51:3c:1f:95:76:56:9b:eb:9c:ac:6f:27:95:
                    e5:03:0a:b7:0e:69:80:1b:b0:ce:23:02:d3:b1:36:
                    8c:0f:48:06:0a:10:83:55:c8:4c:db:7c:cb:7c:6b:
                    4b:71:01:bc:1f:b2:b5:89:5e:b2:d3:59:b5:93:80:
                    f6:70:b8:4a:b8:f2:84:b3:29:3d:5c:ec:98:89:66:
                    b9:f7:83:43:b4:16:c2:ba:d3:a6:29:d3:16:e2:e9:
                    ed:10:ad:99:0e:45:90:44:01:1b:62:cb:ed:7f:b7:
                    bf:cd:b9
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                E9:88:B4:B7:6C:39:CD:1B:9A:30:18:14:B6:2B:BA:15:6D:20:AA:95
            X509v3 Authority Key Identifier:
                keyid:0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8

            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Certificate Policies:
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.5

            X509v3 Subject Alternative Name:
                DNS:sasproivderca.testharness.cbsd.winnf.github.com
    Signature Algorithm: sha384WithRSAEncryption
         54:90:67:67:90:76:2a:e5:7f:d3:35:18:d5:4b:94:b1:52:66:
         23:e2:7a:4c:aa:6f:0b:5d:0a:bc:f4:80:33:3d:10:d4:49:c4:
         f9:aa:18:6d:51:ca:a8:b8:81:5e:b5:70:12:35:ee:08:c2:65:
         4f:b6:7e:33:57:85:0e:26:4e:ec:ab:0b:17:76:e7:12:31:6c:
         c8:80:59:e6:75:30:34:db:42:d9:2a:87:98:ed:83:2a:11:91:
         9c:51:e2:0e:3d:27:61:24:be:0a:f7:ea:aa:de:1a:fe:c7:62:
         7c:ab:9b:b9:ea:bf:6d:d8:4b:7b:e1:9f:23:4c:21:10:fc:ab:
         84:ff:76:1a:c5:1a:8a:25:9e:d7:ed:2b:47:2a:36:a4:4d:5e:
         67:5d:83:f7:65:69:64:68:3b:3c:ac:58:28:1c:43:49:2e:e9:
         26:ae:3f:06:2d:38:3f:bd:45:1d:59:b5:f5:12:84:5d:c1:fb:
         6e:c2:e0:83:96:70:48:65:54:be:82:0d:cf:30:10:db:72:19:
         6a:15:3e:67:08:51:9c:a2:b2:a0:52:5b:de:ad:b2:64:cf:0e:
         90:86:09:b5:30:d6:95:c8:b4:10:3d:e3:df:22:96:c2:25:bc:
         40:4b:46:50:13:6c:48:a1:8c:03:90:70:09:22:0a:88:c8:d5:
         4c:2c:cc:cf:c4:19:70:f3:81:64:80:d5:b1:aa:a6:a2:cd:13:
         46:dc:37:05:22:4e:d7:58:82:bb:10:54:f2:4a:3f:dd:86:b9:
         18:1b:6e:e8:df:4d:16:89:08:c7:0b:3f:48:04:cf:b5:6f:7f:
         7d:93:40:c3:50:31:ae:f0:2a:91:18:cc:11:43:40:6f:a7:69:
         af:e9:ec:07:08:f0:c6:48:dd:d8:4c:1c:93:78:87:38:29:f8:
         8c:4b:3f:05:4d:61:e8:ff:a5:f7:2b:b9:49:23:7c:1a:15:25:
         1e:1c:47:c3:ca:fe:b8:e0:9e:5b:2e:06:f0:59:aa:40:e7:f8:
         bb:7c:b3:73:5b:36:ed:93:cd:ea:4f:89:22:c8:29:be:ae:a9:
         f6:ca:22:3e:77:31:e6:b9:2d:55:4e:64:01:28:4b:63:f9:d1:
         d4:24:48:db:09:88:45:84:e3:2c:28:a0:9b:33:72:ba:82:cc:
         03:29:f1:fd:ce:e4:ea:2d:cf:d3:1d:c3:cd:4f:b7:d6:72:f1:
         0a:a6:8f:63:33:ea:ac:47:cf:37:ed:ea:31:4f:38:00:92:58:
         58:f3:2d:68:7d:fb:91:4b:38:df:94:cd:82:7f:5c:f5:4a:bc:
         ee:22:17:d8:e9:0e:98:95:e0:25:7f:44:4f:30:52:9b:32:d1:
         16:33:67:55:13:06:c0:7d

Step 8) generate RSA private key for CBSD Manufacturer CA 
		 
openssl genrsa -out cbsdmfrcapriv.key 4096

Step 9) generate a CSR for CBSD Manufacturer CA 

openssl req -new -key cbsdmfrcapriv.key -out cbsdmfrcacsr.csr -config /home/opensslcbrs1.cnf  
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:RSA CBSD Mfr CA9001
Common Name (eg, your name or your server's hostname) []:WInnForum RSA CBSD Mfr CA

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 10) sign the CSR of CBSD Manufacturer CA with Root CA

openssl x509 -req -in cbsdmfrcacsr.csr -CA cbrs_ca1.pem -CAkey rootcapriv.key -CAcreateserial -out cbsdmfrcacert1.pem -days 365 -sha384 -extfile /home/opensslcbrs1.cnf -extensions cbrs_cbsd_mfr_ca

Step 11) verify CBSD Manufacturer CA parameters

openssl x509 -in cbsdmfrcacert1.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 16518306035915679253 (0xe53ccfd269f1e615)
    Signature Algorithm: sha384WithRSAEncryption
        Issuer: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Validity
            Not Before: Jan 29 09:14:23 2018 GMT
            Not After : Jan 29 09:14:23 2019 GMT
        Subject: C=US, O=Airspan Networks, OU=RSA CBSD Mfr CA9001, CN=WInnForum RSA CBSD Mfr CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:93:72:46:88:67:e0:48:3a:f2:fc:f0:2c:cf:0c:
                    00:97:f7:00:0a:83:98:8a:a6:af:9d:52:e7:43:30:
                    70:b5:ce:c2:a5:1f:74:93:e9:5f:e3:3e:42:10:3a:
                    0f:8b:12:f1:d3:ef:ab:4d:78:4c:3e:f3:78:f1:d3:
                    38:88:3e:b2:f1:02:f3:ed:0d:7b:39:07:3c:97:4b:
                    60:77:95:0b:75:2c:ae:85:46:73:07:70:a7:64:16:
                    7a:85:42:7d:06:4e:f7:06:a1:35:14:b9:d3:e8:54:
                    9e:67:c3:df:5e:d0:8b:5f:2b:e0:d7:e0:34:29:65:
                    aa:3b:6c:df:80:e2:39:91:8d:a9:2f:93:4e:f7:f4:
                    bb:f5:fc:ea:3f:d2:34:56:7f:0a:39:75:fa:b0:98:
                    81:79:2b:45:fc:e6:00:b8:ee:41:9c:fb:f7:eb:71:
                    05:05:b2:fc:2a:09:1f:9d:98:87:72:b4:d2:5a:69:
                    8c:79:67:36:d3:a4:65:67:e2:21:a4:84:ef:5e:92:
                    e4:ed:16:11:b8:10:34:ee:2a:69:9f:62:1a:20:73:
                    77:49:15:05:5e:b3:2d:67:db:ed:39:e3:51:cc:7f:
                    34:cf:25:1c:40:35:4d:ab:60:56:94:0f:94:63:c9:
                    25:67:41:6c:c5:8f:96:31:64:f1:c1:7d:d4:75:c4:
                    89:40:50:7d:5f:de:1e:4e:3b:7b:1d:4b:59:6e:69:
                    0a:0e:ac:00:35:cf:2a:93:b7:ed:8c:9c:3c:e7:63:
                    14:ea:89:e2:0a:10:03:b6:ce:84:0e:ce:74:0d:d0:
                    f3:2c:b7:b2:96:57:75:55:84:ef:7e:5d:e9:71:2e:
                    3b:06:a9:75:bc:8f:84:63:0c:cc:ca:77:9d:09:9d:
                    97:4f:9d:77:87:55:fb:d8:4c:b9:39:91:f3:c1:ef:
                    43:55:28:0a:50:85:77:eb:68:6a:7e:8f:27:c0:83:
                    b7:84:40:ff:35:1b:83:bc:a3:dd:f3:e5:af:31:8e:
                    e6:ac:64:68:6a:38:79:b5:5b:1c:10:67:95:f5:7f:
                    c6:6b:2a:3c:3b:aa:79:57:4a:02:32:0b:04:2f:7e:
                    ef:9c:29:88:56:15:ec:a1:e1:bd:35:4b:f0:02:9c:
                    28:ca:d6:14:4b:fa:4b:ac:20:ce:ec:76:8d:fe:96:
                    cb:b6:97:48:49:84:25:8e:f9:2a:10:3e:3a:ae:70:
                    f3:1f:ad:3a:82:a4:aa:f8:c5:2c:0e:0e:0a:e4:d6:
                    ec:f1:1d:ad:00:34:d8:b4:79:dc:81:1a:27:6d:de:
                    7a:1d:85:c5:40:d7:c9:da:9d:d7:08:43:13:5b:17:
                    d3:55:a6:a1:b7:9b:2a:48:64:6d:da:df:0f:c9:54:
                    5f:06:6d
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                85:DC:C1:68:39:DD:77:54:8F:74:CA:F9:0D:FE:71:F5:24:8B:8B:F9
            X509v3 Authority Key Identifier: 
                keyid:0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8

            X509v3 Basic Constraints: critical
                CA:TRUE, pathlen:1
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.5

            X509v3 Subject Alternative Name: 
                DNS:cbsdmfrca.testharness.cbsd.winnf.github.com
    Signature Algorithm: sha384WithRSAEncryption
         73:47:2b:26:01:21:c5:0e:14:b8:d3:aa:0a:ae:7d:1f:ea:f4:
         f6:b5:a8:7c:34:4f:83:25:2d:d2:b6:8b:8d:a0:a4:44:19:5f:
         db:e4:90:ec:31:ea:f2:2d:42:2d:f6:24:d1:02:08:0f:4f:72:
         9a:53:33:34:f5:58:6f:95:a9:e0:ce:bf:e7:2b:76:d7:71:7a:
         64:c9:d1:92:15:67:94:27:ba:28:70:b8:ca:f5:6b:03:08:c5:
         9d:83:07:ac:54:c3:8c:85:d6:60:2c:9a:0b:e9:f2:c3:e7:2c:
         1f:55:71:6b:41:75:9f:03:25:65:e8:a0:be:1f:f8:01:7b:2c:
         30:2a:a9:d3:4c:71:43:51:78:74:87:e4:b9:20:a0:89:1e:f6:
         bf:e2:67:6c:1a:4f:9a:9d:36:30:50:d3:c1:19:37:b0:9f:fc:
         41:9e:a5:91:50:f7:60:aa:06:b4:db:79:e5:a6:fc:89:f3:9a:
         e8:fe:f1:d5:d0:24:c4:a8:1d:15:7f:c1:47:20:c3:6e:15:8d:
         dd:dd:c5:5e:e9:f4:6e:84:2a:b5:a3:ea:41:bf:d9:55:0b:4e:
         7d:21:9f:0d:17:a2:83:ba:fe:33:ce:24:54:cc:4d:7f:fd:cd:
         d0:f5:ab:e8:d3:14:9a:60:31:ca:f1:73:ac:3a:b6:c5:14:ba:
         51:99:f4:40:af:33:66:fa:eb:ee:37:05:7e:ef:79:06:e1:c2:
         d4:5d:4b:9c:a1:48:a8:19:d8:10:46:e1:2c:2d:46:16:8b:bd:
         7d:72:49:1d:cb:6a:34:bc:14:3e:1f:60:3c:18:23:69:e9:03:
         e0:2f:8f:ae:ef:17:ac:ff:79:78:e6:a4:12:0e:3f:f0:35:5c:
         7f:bc:38:01:0e:31:c5:26:49:f5:af:b2:0e:85:7a:14:33:f3:
         24:bd:ee:81:7b:67:74:f3:c8:98:69:bf:45:20:0a:08:fc:53:
         46:7e:a2:2c:2a:79:de:bd:52:96:b7:40:74:30:a5:a9:06:51:
         95:be:4c:ef:5a:a2:dc:4d:56:b7:e0:66:da:45:a0:56:7b:13:
         24:3c:8d:bf:15:d7:16:0a:17:3e:85:05:8f:6c:5d:1f:33:85:
         93:f5:e5:67:db:f7:6d:7a:6c:e0:a0:89:4f:ce:be:b7:dc:e9:
         51:ff:3e:6a:2b:8f:ad:af:61:52:96:ab:8a:ad:3a:72:65:d0:
         1d:76:6e:f9:74:81:02:ed:be:55:93:76:a5:56:92:6a:bc:04:
         c3:e2:33:4d:12:45:f4:11:a1:39:e1:5f:a3:11:2f:66:7a:0d:
         71:2b:df:e9:71:6c:06:dd:24:c2:19:9e:c8:fd:01:78:1a:7d:
         59:68:1d:2e:b8:77:26:ca

 
Step 12) generate RSA private key for Domain Proxy CA 
		 
openssl genrsa -out domainproxycapriv.key 4096

Step 13) generate a CSR for Domain Proxy CA

openssl req -new -key domainproxycapriv.key -out dpca.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:RSA Domain Proxy CA9001
Common Name (eg, your name or your server's hostname) []:WInnForum RSA Domain Proxy CA

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []: 

Step 14) sign the CSR of Domain Proxy CA with Root CA

openssl x509 -req -in dpca.csr -CA cbrs_ca1.pem -CAkey rootcapriv.key -CAcreateserial -out dpcacert1.pem -days 365 -sha384 -extfile /home/opensslcbrs1.cnf -extensions cbrs_domain_proxy_ca		 

Step 15) verify Domain Proxy CA parameters

openssl x509 -in dpcacert1.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 16518306035915679251 (0xe53ccfd269f1e613)
    Signature Algorithm: sha384WithRSAEncryption
        Issuer: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Validity
            Not Before: Jan 28 16:49:49 2018 GMT
            Not After : Jan 28 16:49:49 2019 GMT
        Subject: C=US, O=Airspan Networks, OU=RSA Domain Proxy CA9001, CN=WInnForum RSA Domain Proxy CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:d6:c1:27:b2:54:83:ce:c7:d1:aa:83:0a:48:79:
                    f8:ce:f3:41:87:53:87:ec:2a:07:7f:8e:af:ac:02:
                    10:86:6d:eb:c9:ec:df:f1:6f:36:7f:5c:88:d8:c1:
                    50:78:b7:95:e3:ba:8a:27:31:5f:aa:b1:f1:71:6c:
                    e3:25:1b:72:9c:63:38:d7:5b:93:7d:6f:b8:69:1f:
                    10:07:f3:04:2f:c5:33:86:69:9f:15:a2:66:5f:e3:
                    51:bb:a6:0e:0d:d1:c6:2f:26:af:e2:fe:0d:1e:99:
                    a2:6d:3d:9f:7a:52:04:68:44:f7:97:88:77:b4:43:
                    a9:bb:c4:53:6f:3e:bc:2d:8a:00:42:1c:cf:d8:b5:
                    33:bd:ef:72:d5:05:28:cb:9f:ef:5a:d2:0c:1f:95:
                    59:85:7f:f9:3b:71:15:8f:33:30:e3:64:30:e0:b1:
                    f1:3f:4f:7c:dd:ea:39:7b:7e:88:b3:39:82:10:0d:
                    1d:56:42:da:21:85:70:b1:89:2b:98:5c:69:50:2b:
                    16:13:de:28:c6:83:9b:ae:92:62:2c:63:f7:6e:bc:
                    1a:a5:de:28:c1:62:aa:ea:3f:41:d9:ca:80:55:2c:
                    1c:b4:93:da:76:97:6a:0c:93:de:8c:8b:50:1d:47:
                    09:75:8e:1d:e1:a9:c7:d6:39:e8:52:09:04:67:9f:
                    cc:0e:0d:d0:a4:17:75:60:7d:73:ef:42:1f:57:8f:
                    7e:9d:13:5f:fb:d8:66:d4:87:ad:95:bc:29:9e:a1:
                    6c:4f:94:e2:6f:c4:a6:ef:03:7f:92:3f:87:a9:96:
                    f7:3d:79:2c:34:4d:42:44:80:10:32:9e:77:74:1b:
                    00:55:1c:7c:9c:ca:1d:02:90:0a:31:ac:6e:68:d4:
                    88:c5:0c:5f:63:be:b8:99:63:a6:12:2f:53:69:e5:
                    3a:53:d1:1d:99:2b:b3:7e:a8:76:e8:f1:36:e9:ea:
                    0e:09:6b:42:07:8f:20:35:34:1b:62:67:ed:60:9b:
                    2f:39:e9:15:99:ff:b7:da:3b:f1:be:3e:6b:a6:0e:
                    65:10:05:37:f2:f1:5e:4a:5e:12:96:91:ca:4b:ba:
                    6f:25:56:de:14:fb:d4:23:94:c3:c4:fc:b1:5d:28:
                    d4:3b:3b:86:9d:d4:33:ef:4a:61:a7:d7:bb:18:40:
                    06:f7:01:d9:6e:9a:8b:70:7d:4b:2e:d4:f3:3a:37:
                    b7:d8:bb:0c:5e:35:58:3b:f7:59:b3:f8:1a:55:26:
                    e9:2a:6d:fd:30:6c:14:99:3b:81:68:51:7b:3e:fa:
                    f5:a2:a8:02:64:f4:40:6a:4c:13:e8:df:86:2b:0e:
                    6b:10:e4:f1:b4:55:3e:1a:0f:3e:a9:75:a0:0e:88:
                    7f:9a:55
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                E3:F4:E4:60:DA:92:31:E6:84:76:1A:DD:B7:02:6E:73:F4:1C:05:E9
            X509v3 Authority Key Identifier: 
                keyid:0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8

            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.5

            X509v3 Subject Alternative Name: 
                DNS:domainproxyca.testharness.cbsd.winnf.github.com
    Signature Algorithm: sha384WithRSAEncryption
         c7:7d:c2:9a:34:6f:56:80:05:4b:2b:4a:f0:cf:8e:1e:39:b3:
         b6:fd:de:39:d0:cd:68:ea:19:a1:9a:8d:f3:46:2a:7c:cb:12:
         bf:0e:1b:07:85:a4:f1:27:67:b3:69:62:fa:ad:c3:ad:f9:01:
         73:6c:a3:89:c9:d7:7e:dc:4b:4c:58:69:aa:86:73:5d:3e:ad:
         46:90:bc:fa:82:c3:42:50:5c:d6:e2:ed:8a:04:b8:08:cf:0d:
         e7:a9:12:39:b1:ec:fe:2d:b6:2b:3d:19:24:44:2a:c9:2b:ee:
         9c:86:f2:62:01:5c:80:9a:38:39:c2:bf:86:4e:24:cf:9b:81:
         c9:94:8f:69:7c:c3:ed:df:24:33:22:15:72:0a:e9:5c:02:23:
         02:07:3d:a0:4e:41:ac:63:44:68:ea:a6:ec:46:8b:8a:8c:ca:
         04:1e:8c:ba:62:23:9f:6b:c1:cc:de:15:9d:cd:9a:2d:d7:34:
         79:61:7d:2a:cd:a2:1f:34:76:66:f9:30:2c:f5:e8:a9:49:10:
         d8:89:5f:b9:01:22:56:52:7f:20:3d:c2:ef:87:3d:f8:64:ae:
         b2:24:44:75:4d:c7:5c:fa:4e:14:0b:3f:e1:6b:82:10:0e:47:
         52:ea:43:8f:35:f6:b7:53:71:d1:c1:23:d7:c5:02:cd:f2:4e:
         09:a2:a8:de:5e:59:6a:1c:c8:21:2d:ba:32:01:1b:44:68:3a:
         c7:ed:8e:dd:33:c9:c6:a5:eb:51:11:3a:fd:33:a1:c4:88:10:
         98:d8:30:d3:35:1d:1f:d7:eb:7a:77:b3:a0:8a:b1:00:69:37:
         a6:cf:ee:c4:38:98:81:74:66:15:02:42:57:72:27:7e:1d:9a:
         5d:74:a7:f1:61:24:f2:f7:ec:71:68:47:68:68:2d:3b:6a:55:
         87:1d:76:7d:b4:09:9a:9e:69:4b:82:43:18:0a:dc:ac:55:70:
         21:d5:27:43:00:83:37:f0:d5:f3:90:5d:db:e8:db:da:ad:85:
         e0:99:27:17:ae:b3:b8:f5:ec:5d:e4:92:39:b2:6d:ac:41:98:
         e9:94:2b:76:4b:90:8a:13:12:38:5f:52:03:71:a7:5e:ce:53:
         06:b3:14:c0:43:fd:5e:f1:92:34:cb:88:d5:c5:02:6e:6f:3b:
         a7:21:18:ed:8e:d0:4a:0d:df:1e:05:38:a8:04:40:ed:e6:7c:
         12:a0:ec:8d:04:60:d1:24:0a:fc:8e:b1:54:17:37:a0:ca:e9:
         c1:75:8f:3b:d4:5f:75:ff:68:2c:29:e9:55:9c:c4:59:55:3d:
         6a:02:a1:d2:df:7f:2a:85:69:5c:09:c5:59:62:c9:91:90:8f:
         5f:69:44:7c:51:a7:aa:a9

Step 16) generate RSA private key for SAS Provider Unknown CA (for negative security test cases)

openssl genrsa -out unknownsascaprivkey.key 4096 

Step 17) generate a CSR for SAS Provider Unknown CA

openssl req -new -key unknownsascaprivkey.key -out unknownsascacsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:RSA SAS Provider CA UNKNOWN
Common Name (eg, your name or your server's hostname) []:WInnForum RSA SAS Provider CA

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 18) sign the CSR of SAS Provider Unknown CA with Root CA

openssl x509 -req -in unknownsascacsr.csr -CA cbrs_ca1.pem -CAkey rootcapriv.key -CAcreateserial -out unknownsasca.pem -days 365 -sha384 -extfile /home/opensslcbrs1.cnf -extensions cbrs_sas_ca

Step 19) verify SAS Provider Unknown CA parameters 

openssl x509 -in unknownsasca.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 16518306035915679254 (0xe53ccfd269f1e616)
    Signature Algorithm: sha384WithRSAEncryption
        Issuer: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Validity
            Not Before: Jan 30 15:49:39 2018 GMT
            Not After : Jan 30 15:49:39 2019 GMT
        Subject: C=US, O=Airspan Networks, OU=RSA SAS Provider CA UNKNOWN, CN=WInnForum RSA SAS Provider CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:c1:e4:1b:58:07:2c:32:58:08:a3:0b:bc:57:6e:
                    0e:24:48:e5:f8:c1:d1:09:ba:d9:92:10:eb:e0:d1:
                    d5:f6:e5:dd:ea:d6:2b:54:57:c3:a8:f5:f2:0c:2b:
                    83:f4:46:58:c7:0a:36:47:b2:25:8e:f6:a0:28:64:
                    ee:d3:4a:0b:a3:d3:de:6e:9b:34:1e:36:a3:94:64:
                    dc:ce:17:8d:74:f1:66:e8:76:91:b1:de:dc:1f:d6:
                    ce:3c:02:77:9d:c3:e6:ce:9d:20:01:bb:eb:a3:5c:
                    9b:2c:bd:b6:b8:ff:c3:b2:93:a4:9d:d1:45:f2:61:
                    b7:59:7b:49:5b:0e:ad:fa:8a:bd:49:81:1e:28:23:
                    30:97:67:1e:66:df:9f:d1:8d:54:a9:c5:f8:0d:2b:
                    77:ab:28:ab:56:f4:cb:bf:75:e1:ed:a8:89:1a:3d:
                    04:96:5c:62:2d:fb:85:a7:81:91:a5:33:db:7e:c9:
                    b0:a1:31:af:32:b4:a9:1d:e2:76:50:a1:9d:45:df:
                    1c:19:11:8b:d8:35:92:01:76:32:04:1a:db:77:7a:
                    59:b1:7a:c1:a9:97:fd:16:e9:af:31:0d:ba:18:b2:
                    11:b3:40:bf:d5:55:ab:00:25:4a:8c:e8:e0:50:7a:
                    96:f0:4f:63:79:6f:1e:24:e5:1d:d6:3e:92:45:fb:
                    e2:14:38:bb:fa:fe:29:9a:55:f1:de:03:9a:27:ff:
                    e2:3d:c0:9a:95:c5:45:26:8e:5a:5d:d1:c4:df:9f:
                    5f:54:7b:44:a5:3a:95:11:e8:77:54:92:38:5f:ac:
                    88:a7:f2:71:65:39:b6:24:61:30:99:7a:6e:77:9b:
                    8c:9b:e8:b7:ce:af:1a:23:3a:e3:15:76:a9:c6:af:
                    3c:e2:2d:d8:72:53:15:48:58:61:eb:8b:39:72:9f:
                    50:a8:d8:94:1b:0e:2d:86:08:31:58:f2:b9:ea:a9:
                    27:76:78:83:2b:8b:90:0d:4b:50:7a:d6:7c:bf:3a:
                    03:75:c7:1f:98:f8:50:84:f3:97:6e:08:13:93:07:
                    5c:71:cc:62:20:7f:12:e1:55:f8:f8:80:6d:87:02:
                    cd:98:83:cc:8d:b3:18:0e:1b:9d:82:4e:bf:3a:21:
                    d9:a6:58:75:7a:10:84:48:7f:d1:e3:9d:6c:38:35:
                    08:16:37:f7:5b:14:e1:fd:17:26:73:18:72:e5:50:
                    5e:f2:8e:84:12:4a:94:72:9d:32:c2:c4:8a:08:95:
                    8b:f7:e2:a7:34:ac:0e:e0:87:9f:cc:a3:5c:3f:4c:
                    9d:f4:21:e9:0d:7a:e0:5c:61:26:ad:6b:67:fd:c0:
                    da:58:9d:db:4f:c6:c5:b6:f8:4d:30:43:06:9f:e8:
                    76:48:a5
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                12:D8:5C:8B:34:1A:57:5E:64:7A:3F:C3:0D:47:D7:26:10:89:52:AC
            X509v3 Authority Key Identifier: 
                keyid:0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8

            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.5

            X509v3 Subject Alternative Name: 
                DNS:sasproivderca.testharness.cbsd.winnf.github.com
    Signature Algorithm: sha384WithRSAEncryption
         c4:be:67:7e:e5:8f:dd:54:7f:0d:08:1e:c6:c7:3b:9e:d5:7f:
         48:b5:31:5d:52:f7:cb:47:b1:e4:4e:78:64:6d:12:37:45:2e:
         a3:04:f0:85:13:36:96:1a:a4:5e:52:d5:5e:e0:04:e5:65:3a:
         b7:b8:f6:01:5f:db:8d:25:b3:9d:81:45:4a:10:b9:26:87:4d:
         22:34:4e:f6:20:55:1d:0c:36:aa:6c:de:77:f8:fd:96:e3:7a:
         3d:d5:0d:bc:91:d3:e4:13:15:96:81:a7:78:92:59:2a:ee:48:
         f5:19:72:8b:85:b1:26:a0:d2:f9:5e:75:ee:20:10:fd:e0:2f:
         aa:1b:b8:df:1e:9c:80:22:65:0d:38:5b:ea:41:d5:ec:c8:fb:
         3b:8e:1a:53:58:59:b1:e5:05:b5:11:5f:be:43:8e:69:69:7d:
         e9:c6:33:91:e8:24:3a:be:a7:9d:92:da:f1:ee:1d:7d:d6:a0:
         24:60:5d:b9:8e:ca:cc:3a:87:35:c6:30:e1:3b:6f:43:b5:7f:
         f5:55:aa:f3:4e:ee:b6:50:ef:ae:1c:a5:4c:2f:d1:8c:f0:f8:
         c5:c5:6c:32:12:95:da:72:7e:c8:ae:eb:17:5e:d5:e3:04:70:
         ef:ab:ea:62:66:c3:68:a5:82:e1:f8:bb:19:71:f1:b0:3d:3c:
         a1:23:30:c2:98:1c:40:92:05:9b:b0:68:c4:4b:fa:86:56:3a:
         d0:72:9e:eb:9a:ec:36:42:c9:d6:16:74:5f:61:72:ba:33:3d:
         a2:d2:66:92:53:8d:16:e6:27:c8:b2:0b:05:5b:a1:e0:d9:0a:
         05:d5:13:9f:f6:29:48:2e:ca:cd:f7:33:50:68:2e:43:80:64:
         6a:ba:d4:09:9d:b2:22:2a:46:2c:23:b3:e8:59:48:4a:b3:c4:
         ab:9b:5a:9c:d5:da:35:af:a2:51:f8:83:2e:d8:e8:b8:b5:c9:
         ff:28:83:93:b8:e5:4e:5c:ac:eb:87:d8:b8:b2:7c:32:6c:3d:
         d4:e5:aa:55:26:1c:5f:a1:07:25:5c:0a:3b:5c:c7:05:9e:77:
         99:f9:5e:81:e8:54:9e:a5:cf:17:f3:0e:89:38:5f:af:64:ff:
         19:ba:55:7e:34:db:74:aa:09:63:f5:eb:a6:d3:55:67:66:7f:
         6b:0e:f4:72:02:60:6e:48:57:01:13:f9:52:9a:79:e1:95:4c:
         31:fe:b9:24:3d:ba:d3:a9:c2:a8:e3:a7:a9:8b:9b:95:9d:c8:
         3a:2f:c1:86:b7:a2:13:d1:91:b9:5e:fb:33:0d:b8:78:62:73:
         df:32:31:ba:f0:4c:d6:d8:b1:fd:d3:45:72:8d:09:a3:cd:51:
         2e:18:56:cf:e5:b5:70:df

Step 20) generate RSA private key for Professional Installer CA (for test cases where UUT sends CPI Signed Data)

openssl genrsa -out cpicaprivkey.key 4096 

Step 21) generate a CSR for Professional Installer CA

openssl req -new -key cpicaprivkey.key -out cpicacsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Neto works
Organizational Unit Name (eg, section) []:RSA Professional Installer CA9001
Common Name (eg, your name or your server's hostname) []:WInnForum RSA Professional Installer CA

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 22) sign the CSR of Professional Installer CA with Root CA

openssl x509 -req -in cpicacsr.csr -CA cbrs_ca1.pem -CAkey rootcapriv.key -CAcreateserial -out cpicacert.pem -days 365 -sha384 -extfile /home/opensslcbrs1.cnf -extensions professional_installer_ca

Step 23) verify Professional Installer CA parameters 

openssl x509 -in cpicacert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 16518306035915679255 (0xe53ccfd269f1e617)
    Signature Algorithm: sha384WithRSAEncryption
        Issuer: C=US, O=WInnForum, OU=RSA ROOT CA9001, CN=WInnForum RSA Root CA
        Validity
            Not Before: Mar  1 15:36:45 2018 GMT
            Not After : Mar  1 15:36:45 2019 GMT
        Subject: C=US, O=Airspan Networks, OU=RSA Professional Installer CA9001, CN=WInnForum RSA Professional Installer CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:cb:32:ef:cf:9e:cb:db:a0:1c:fc:04:c3:53:7e:
                    f3:14:3f:6c:38:72:4f:58:84:07:9e:82:3c:8e:b4:
                    35:aa:9c:47:cc:55:14:53:66:83:f9:01:10:5f:0f:
                    9b:a2:fa:2d:cd:75:02:46:3e:ca:1e:6d:bf:92:14:
                    32:8f:da:8d:21:e2:40:71:cd:df:17:31:ee:b4:c3:
                    18:ae:b5:4d:fd:15:91:4d:35:28:3b:49:c5:ef:2a:
                    b7:2b:50:00:02:e8:18:10:85:97:f5:00:af:b8:67:
                    95:b3:1d:fa:b3:8b:51:88:74:5a:40:39:9b:de:14:
                    cc:d0:aa:6c:01:cd:28:64:6f:6b:32:19:92:65:29:
                    77:83:20:a6:ca:a2:29:2c:a9:2d:97:48:c8:3c:bc:
                    1d:ec:e7:35:08:e2:32:2f:74:96:ce:e4:bc:9e:5b:
                    cb:04:e6:9a:f8:b4:33:20:42:2e:b4:55:df:8f:31:
                    48:53:91:7f:f0:3a:58:84:cf:88:02:e9:48:f5:47:
                    45:62:d2:a5:78:cb:9b:19:e7:f6:d7:81:21:b4:8e:
                    68:db:42:06:fb:b9:b5:14:f6:ad:65:a4:78:56:60:
                    d5:81:ea:ad:b7:91:07:61:3e:f0:7d:53:0a:89:36:
                    92:c0:18:47:a0:a4:75:a4:3a:a5:2d:6b:44:46:75:
                    cb:94:d9:09:61:11:5e:34:2f:79:82:ee:70:f3:73:
                    76:a0:55:0f:87:da:a3:85:52:fe:3c:cb:3d:78:8a:
                    38:b8:6e:d5:b8:14:c3:14:83:ca:5c:5b:37:25:8d:
                    05:21:1f:da:dd:59:e6:5b:2b:0e:4d:0f:03:06:fd:
                    7a:37:5c:f8:62:88:3c:36:47:a4:67:f7:3f:5f:80:
                    dd:18:0b:3f:f0:e2:13:ab:a4:5b:19:af:02:bf:1b:
                    06:e1:ff:b4:2e:b6:e4:63:b5:7b:b0:dc:94:cd:90:
                    50:5c:2a:7f:3c:36:9c:69:8d:cc:77:f0:3f:a4:60:
                    dc:a2:6a:e8:b3:48:89:83:99:c8:36:f4:66:c7:70:
                    65:c1:df:a7:4a:cd:fa:4c:5b:4a:ed:b3:32:6a:6f:
                    15:5f:23:6b:ab:80:6d:df:b9:97:31:b4:e4:60:8d:
                    5e:79:74:83:c2:d9:ff:31:84:58:4f:ba:8d:ef:c5:
                    62:82:c0:1e:fe:e8:2c:9d:f2:47:f9:8e:39:01:bc:
                    8e:04:cf:c0:35:97:89:77:28:e1:15:21:21:f2:0b:
                    68:b5:5b:9d:b3:e7:7f:a1:47:da:9e:1a:e7:30:bb:
                    d3:84:91:f3:2d:7b:df:75:a2:28:49:54:a1:47:10:
                    7d:0e:99:82:af:d9:36:08:58:ba:b6:8b:c6:f3:ed:
                    ca:ce:4d
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                50:58:41:95:08:07:F2:F1:32:0C:53:7A:36:D4:29:D0:21:A5:D4:70
            X509v3 Authority Key Identifier: 
                keyid:0C:BA:79:F1:1D:D4:23:A0:15:AD:3A:86:9E:98:6F:DA:50:C0:99:B8

            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.5

            X509v3 Subject Alternative Name: 
                DNS:professionalinstallerca.testharness.cbsd.winnf.github.com
    Signature Algorithm: sha384WithRSAEncryption
         59:f2:5e:05:d5:b0:38:dc:bf:a5:83:c2:26:29:62:ee:42:f0:
         26:b4:16:be:02:4d:45:8e:7a:23:9d:7a:1e:5e:34:80:1f:d3:
         0b:fa:02:ff:85:42:b3:c4:3f:4a:f7:67:96:00:8d:5b:7f:bb:
         53:a8:24:b8:b0:9e:af:66:17:70:7a:69:3f:99:83:a8:de:2c:
         29:ab:3b:72:41:9d:9e:3b:8a:97:ab:b6:ce:44:e3:d4:a1:bf:
         6d:dd:f8:e6:30:c4:ed:23:bc:44:80:82:b3:34:94:73:88:bf:
         99:12:aa:3b:34:b4:fc:e0:87:23:12:e9:7f:39:6f:41:1c:c3:
         af:8a:cf:15:09:c5:64:06:f2:19:30:8c:7d:be:ec:a3:7c:10:
         1b:c7:0b:ac:85:08:98:4f:ec:79:00:70:93:a4:83:06:dd:a9:
         a8:49:45:0b:88:49:2c:8a:e9:a4:ef:b5:bb:07:d4:10:c4:48:
         50:e9:a5:66:72:33:c4:57:b6:19:6a:e7:35:d2:5a:9d:95:bc:
         59:e8:96:fb:11:05:57:7c:36:e5:09:18:f9:a9:1b:45:3c:8d:
         b7:aa:5c:b6:8b:4a:80:91:88:17:58:02:00:91:a2:1a:bb:80:
         33:31:27:31:40:cf:09:a9:53:1b:59:04:07:c2:09:dc:89:94:
         c4:0a:a4:16:c5:f2:c1:d4:7d:53:f8:91:df:16:c0:6b:44:f1:
         f9:d8:a4:17:7b:0e:5c:ed:c6:ed:10:f8:e9:ba:a4:f2:7a:1e:
         2f:bd:d8:38:25:ae:a7:c2:08:06:59:63:49:b6:32:f1:7b:93:
         a5:b0:a0:15:dc:86:b3:dc:b9:46:db:cd:dc:08:96:91:71:3b:
         75:54:ab:38:e0:30:2a:a5:fc:49:fc:de:6f:34:d5:01:c2:b5:
         96:88:e4:e4:0d:a5:9f:a9:12:85:20:41:64:53:20:b2:25:85:
         77:ed:d8:15:79:89:ac:bd:9a:51:13:13:d0:3d:42:71:45:a8:
         fe:4b:e9:be:6e:c7:e2:ca:3c:74:c3:ed:c0:e1:89:af:29:68:
         64:6f:9b:1c:cd:35:c4:cf:da:9c:f8:f4:6b:ea:e4:1c:c3:f7:
         2e:06:19:79:cc:5e:fb:db:68:a9:f1:95:d3:95:e7:e9:52:2b:
         79:c4:a1:53:54:c1:94:65:ca:2c:c0:4b:11:87:fd:83:a2:d1:
         f8:f2:7f:d6:24:81:71:fb:85:73:3d:f2:26:ab:fa:a3:00:89:
         91:e6:45:68:c1:86:64:98:bc:37:38:f1:21:2c:31:fe:87:a8:
         8c:42:f2:ea:7e:e2:74:67:50:2f:d4:9f:77:9d:76:81:16:7e:
         62:93:f4:07:e7:a5:ff:02
		 
######################################################################################################################
# Third action for test lab is to generate the SAS Provider certificates which will be used by the SAS Test Harness (in the conf.xml file of SAS Test Harness)
# SAS Provider certificates are: 
# 1) SAS Provider certificate (for SAS Test Harness regular testing) signed by the SAS Provider CA in previous action
# 2) SAS Provider certificate of Unknown CA  (for negative security test cases) signed by the SAS Provider Unknown CA in previous action
# 3) SAS Provider certificate with expired validity time (for negative security test cases)
# 4) SAS Provider certificate with CRL extensions (for negative security test cases) signed by the SAS Provider CA in previous action
# 5) SAS Provider certificate which is corrupted with invalid signature (for negative security test cases)
# in the OpenSSL commands for next steps take note of the -extensions pointing to the correct extension configuration for each certificate type
#######################################################################################################################

Step 24) generate RSA private key for SAS Provider certificate (for SAS Test Harness regular testing) 

openssl genrsa -out sasharnesspriv.key 2048 

Step 25) generate a CSR for SAS Provider certificate

openssl req -new -key sasharnesspriv.key -out sasharnesscsr.csr -config /home/opensslcbrs1.cnf
 
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Test Lab for FCC PART 96
Organizational Unit Name (eg, section) []:WInnForum SAS Provider Certificate
Common Name (eg, your name or your server's hostname) []:mocksas.testlab.winnf.github.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 26) sign the CSR of SAS Provider certificate with SAS Provider CA

openssl x509 -req -in sasharnesscsr.csr -CA sascacert.pem -CAkey sascapriv.key -CAcreateserial -out sasharnesscert.pem -days 180 -sha256 -extfile /home/opensslcbrs1.cnf -extensions sas_cert

Step 27) verify SAS Provider certificate parameters 

openssl x509 -in sasharnesscert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 10177691706620776695 (0x8d3e6caef69210f7)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA SAS Provider CA9001, CN=WInnForum RSA SAS Provider CA
        Validity
            Not Before: Jan 29 10:06:33 2018 GMT
            Not After : Jul 28 10:06:33 2018 GMT
        Subject: C=US, O=Test Lab for FCC PART 96, OU=WInnForum SAS Provider Certificate, CN=mocksas.testlab.winnf.github.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:bc:e9:30:b7:75:83:b1:41:f9:aa:26:be:c7:6f:
                    c9:f7:f4:e6:8f:f2:12:1c:93:29:96:9b:05:36:af:
                    de:48:8f:ab:d5:e7:6a:86:be:67:7d:2f:44:05:4b:
                    84:3e:39:00:a6:81:b7:da:38:71:9e:38:22:7d:cd:
                    bf:41:91:eb:4f:c5:1d:ad:33:4d:84:df:3a:91:2f:
                    ef:95:ea:f8:8c:9c:81:fd:ae:b8:93:a7:f8:75:8f:
                    92:b5:ad:1d:5f:20:30:ec:92:39:3a:05:dd:55:cf:
                    f4:4d:5f:a7:ac:73:f3:d9:fb:7f:f4:2d:8e:43:29:
                    75:97:53:ca:93:8c:e9:af:7d:a3:b2:69:7d:7f:3d:
                    52:e6:44:16:bd:bb:a5:9e:78:8a:ac:87:2b:e6:dc:
                    5a:80:af:37:21:77:80:cb:78:17:32:56:8d:0f:1f:
                    f1:ea:44:b7:78:b9:13:ca:15:bf:30:f7:12:2e:62:
                    8d:ea:d4:75:bf:3b:e5:a7:8b:62:2a:2a:cf:97:e6:
                    f2:1c:ae:77:35:a2:d0:60:8c:74:aa:51:e6:9f:5b:
                    58:a4:fc:52:c1:8c:c5:b9:88:80:dd:da:f1:1f:68:
                    46:97:4f:74:90:cc:de:95:a5:f2:19:44:9d:91:cd:
                    2e:79:30:2d:fb:ca:9f:3d:a5:85:da:30:d9:b5:5f:
                    d6:d1
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                39:85:7C:DD:ED:6E:84:48:6E:0B:A3:22:2F:90:99:0C:6C:C0:C2:8F
            X509v3 Authority Key Identifier:
                keyid:E9:88:B4:B7:6C:39:CD:1B:9A:30:18:14:B6:2B:BA:15:6D:20:AA:95

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies:
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.1

            X509v3 Subject Alternative Name:
                DNS:mocksas.testharness.cbsd.winnf.github.com, othername:<unsupported>
    Signature Algorithm: sha256WithRSAEncryption
         83:f4:19:72:41:d1:4d:19:fb:34:0d:37:ce:93:ee:d3:7c:d4:
         e8:c3:c5:66:8e:d2:4f:98:8d:ec:bd:4b:35:55:36:b9:78:c7:
         24:3d:19:ab:f3:a0:b3:50:1c:ce:8a:7f:96:39:1e:22:61:b8:
         9d:f0:61:06:73:a7:f4:b8:9c:e3:4a:06:63:b0:1c:4e:29:d2:
         41:68:cb:55:61:e1:50:2e:08:83:42:16:d0:50:30:6a:79:db:
         78:df:52:62:ae:0a:2c:79:0e:0e:ee:a5:a0:94:1f:e5:b4:51:
         ed:4b:88:96:92:77:a3:79:53:c7:8b:8e:9c:6a:e8:ac:a8:c7:
         80:b3:60:fc:54:55:e9:76:5b:7c:09:db:80:c7:89:e4:ad:95:
         ef:95:d1:74:d9:df:30:7a:74:36:96:4c:17:2d:b4:06:2b:91:
         90:7d:ad:95:95:12:7c:50:d6:dd:7e:f7:25:d4:33:23:8d:58:
         73:18:c1:18:b2:3f:7e:d1:4d:cf:0f:3e:aa:d2:6c:5c:1a:8f:
         0b:ff:62:fb:2d:d9:64:e8:aa:e4:18:4f:e3:ea:ff:2f:97:79:
         37:68:30:93:9a:02:f4:9b:71:8f:20:66:fa:b1:3d:c1:a4:28:
         9e:7f:63:6a:d7:18:e9:90:98:a4:1e:77:ba:4c:03:44:ca:43:
         73:6d:49:20:31:01:53:b8:4a:6a:28:ce:5a:1f:43:18:44:b4:
         b5:95:cf:e1:8c:8c:ed:18:9f:e3:9e:93:7b:de:71:3f:8c:be:
         55:4b:b2:aa:ac:49:82:64:2b:4f:7d:e5:2b:e1:f2:cd:f3:a1:
         e4:57:9a:80:a0:86:15:d2:f2:38:5c:8e:fa:47:db:78:ac:90:
         e1:d2:61:ee:5c:42:13:8e:13:4b:82:c0:ce:a4:5f:d8:f5:e0:
         53:0d:7e:ad:b4:8a:b3:66:25:07:1e:16:44:b9:3c:36:68:a5:
         25:dd:1f:55:20:87:ec:6f:cd:0f:44:b5:c2:26:5b:27:b3:85:
         7e:26:63:a1:5f:af:c6:13:83:2f:3a:75:45:e8:b1:25:19:16:
         93:95:57:f7:e5:dc:4b:5a:2c:b6:64:c3:3e:df:02:a0:86:1c:
         04:9a:81:83:e2:14:aa:2e:26:d5:8d:0a:5d:b9:e0:0e:bc:7c:
         0c:1f:d3:32:c7:0e:0a:d8:20:bb:41:fc:99:1c:f3:d8:25:c3:
         a0:23:ff:e7:c2:1b:72:ff:c9:42:f9:d5:23:bc:9a:50:25:89:
         ef:57:e3:15:08:3f:7e:ea:5e:fb:c0:8c:7f:33:a5:0d:07:1a:
         69:0a:50:d8:4e:10:d3:50:f2:ae:4b:59:6c:61:87:1a:d6:37:
         96:ab:04:6a:e6:2a:6f:8f

Step 28) generate RSA private key for SAS Provider certificate of Unknown CA  (for negative security test cases) 

openssl genrsa -out unknownsascertprivkey.key 2048 

Step 29) generate a CSR for SAS Provider certificate of Unknown CA

openssl req -new -key unknownsascertprivkey.key -out unknownsascertcsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:WInnForum SAS Provider Certificate
Common Name (eg, your name or your server's hostname) []:sasunknownca.testlab.winnf.github.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 30) sign the CSR of SAS Provider certificate of Unknown CA with SAS Provider Unknown CA

openssl x509 -req -in unknownsascertcsr.csr -CA unknownsasca.pem -CAkey unknownsascaprivkey.key -CAcreateserial -out unknownsascert.pem -days 180 -sha256 -extfile /home/opensslcbrs1.cnf -extensions sas_cert

Step 31) verify SAS Provider certificate of Unknown CA parameters 

openssl x509 -in unknownsascert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 12970950238737762967 (0xb4021284e33b8a97)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA SAS Provider CA UNKNOWN, CN=WInnForum RSA SAS Provider CA
        Validity
            Not Before: Jan 30 15:58:41 2018 GMT
            Not After : Jul 29 15:58:41 2018 GMT
        Subject: C=US, O=Airspan Networks, OU=WInnForum SAS Provider Certificate, CN=sasunknownca.testlab.winnf.github.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:b0:07:dd:1f:08:31:5f:8f:f6:72:dd:0b:ca:0b:
                    5b:6d:bd:50:7b:d3:99:6e:21:19:d4:97:37:14:23:
                    3f:2c:a1:09:e8:da:19:98:4a:d3:a7:66:0c:3a:c0:
                    d4:59:ab:c1:b3:5b:2b:b4:96:80:61:98:1e:dc:02:
                    47:be:54:65:1d:2f:f6:e2:49:64:93:f2:a3:08:f3:
                    82:71:47:df:c3:e7:43:72:a1:95:ea:ab:94:0c:1f:
                    fd:e0:35:32:da:bd:08:d7:18:a6:97:29:e8:35:c6:
                    59:9b:cd:81:d2:c0:bf:d3:f7:46:16:c1:04:8f:8f:
                    ce:37:7b:f2:a1:be:d2:56:43:49:97:aa:63:3d:7f:
                    28:85:68:5d:92:43:12:54:1a:a9:42:5d:d6:99:8d:
                    39:49:8e:1e:02:3e:bc:67:09:ef:ac:cd:28:16:fc:
                    f8:57:55:ed:96:48:da:68:04:9f:de:b8:6f:83:1f:
                    5c:33:6a:87:6b:8b:f4:2b:3e:ef:b6:c3:9c:b2:79:
                    8a:fb:38:7d:3d:4d:ee:2c:06:ed:21:42:d2:8e:4d:
                    2e:c5:86:4f:ea:28:59:43:89:26:4a:b1:be:70:bc:
                    bd:f0:31:95:ec:9a:14:93:04:69:14:95:93:51:30:
                    ea:d7:c9:a9:24:aa:42:a1:fa:29:d2:01:58:f2:1a:
                    99:cf
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                6B:26:CE:9D:75:3F:51:24:03:2B:11:3A:01:DC:89:46:2F:43:22:45
            X509v3 Authority Key Identifier: 
                keyid:12:D8:5C:8B:34:1A:57:5E:64:7A:3F:C3:0D:47:D7:26:10:89:52:AC

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.1

            X509v3 Subject Alternative Name: 
                DNS:mocksas.testharness.cbsd.winnf.github.com, othername:<unsupported>
    Signature Algorithm: sha256WithRSAEncryption
         5c:5d:08:de:a2:af:93:b0:fe:b5:33:ea:b0:94:8b:02:1b:48:
         c6:e4:d2:5a:4c:f9:e4:20:25:03:a1:ba:66:f3:16:52:6c:e3:
         4f:10:1c:4b:1f:cd:72:a9:10:c4:3f:ac:0e:69:d8:ae:d4:34:
         81:d7:1d:a7:63:3a:a3:81:52:20:f2:48:43:5a:02:69:14:18:
         f1:c2:51:a2:91:51:44:57:65:10:b1:a5:33:5f:91:7b:3e:b6:
         43:a8:63:11:1f:f8:39:e6:09:1d:19:c3:0e:28:99:14:1a:01:
         72:d1:78:9d:98:90:73:ab:05:7d:24:e7:c7:d2:c2:2f:89:e3:
         5d:66:39:1c:55:9a:cd:1a:29:ea:cb:bc:5a:82:86:a2:4c:e4:
         4b:d5:d4:0f:8a:e4:70:08:e3:d1:8d:70:13:7a:6b:e3:02:5b:
         59:8d:3f:7e:93:d2:06:f8:6a:83:bd:61:a7:53:56:b2:c1:f0:
         6c:6c:77:6c:ca:61:f6:6c:b5:e4:ea:5c:f1:bf:67:30:a1:40:
         02:03:ac:ad:50:2d:6c:c9:18:cd:63:17:c1:9f:d1:03:fc:a4:
         65:d3:ca:75:d6:df:cb:69:34:83:cc:ec:84:b0:9f:85:fe:33:
         2c:68:8b:33:86:23:b8:18:c9:79:ce:36:d7:45:33:34:6b:e0:
         7f:a8:b0:9b:3b:39:91:e6:bb:45:68:b6:b0:45:fb:37:bd:7d:
         f7:b1:76:51:b8:17:c7:83:a2:db:25:df:73:6c:72:bf:ed:f6:
         9c:cb:a0:c2:b1:d9:8b:02:5b:03:21:5e:c5:56:39:d2:69:bc:
         ba:f2:56:be:61:ba:b3:01:bb:87:c1:09:a7:cb:4a:5c:69:2d:
         11:dc:5f:fd:e6:c8:69:4c:17:d5:ce:48:8c:b3:85:e1:fa:1f:
         0f:e5:d1:dc:44:eb:a3:51:16:8d:5b:1e:23:41:ab:5b:cd:f8:
         cb:c8:e5:29:8b:f8:07:d7:86:22:d3:48:e2:15:b8:34:6c:4b:
         36:30:d0:ec:25:ad:80:14:4c:34:ba:e5:1a:69:21:6f:f2:43:
         2f:ff:0a:62:8c:2f:ce:17:8a:76:34:81:cb:65:9b:4a:4e:fd:
         d8:bf:42:46:62:85:ee:c5:f8:8d:36:df:74:9b:a8:23:32:d1:
         84:a0:5f:91:49:b4:e3:2e:e6:4e:38:a1:5b:9e:8a:ed:ed:fc:
         fd:8d:38:c2:56:f0:ef:b1:a1:b2:94:61:68:d3:5a:f2:d2:b8:
         73:84:2d:16:10:8d:10:7a:8c:be:86:50:a1:d4:6a:9e:16:0d:
         aa:a4:57:62:20:d6:c4:8d:0e:0b:5c:e8:1e:33:fc:f9:3a:a6:
         67:99:40:c7:83:97:ee:de

Step 32) generate RSA private key for SAS Provider certificate with expired validity time (for negative security test cases) 

openssl genrsa -out sasexpiredcertprivkey.key 2048 

Step 33) generate a CSR for SAS Provider certificate with expired validity time

openssl req -new -key sasexpiredcertprivkey.key -out sasexpiredcertcsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:WInnForum SAS Provider Certificate
Common Name (eg, your name or your server's hostname) []:expiredsascert.testlab.winnf.github.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 34) sign the CSR of SAS Provider certificate with expired validity time with SAS Provider CA.
######## for this SAS Provider certificate with expired validity time the -days must be 1 day #######

openssl x509 -req -in sasexpiredcertcsr.csr -CA sascacert.pem -CAkey sascapriv.key -CAcreateserial -out sasexpiredcert.pem -days 1 -sha256 -extfile /home/opensslcbrs1.cnf -extensions sas_cert 

Step 35) verify SAS Provider certificate with expired validity time parameters

openssl x509 -in sasexpiredcert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 10177691706620776697 (0x8d3e6caef69210f9)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA SAS Provider CA9001, CN=WInnForum RSA SAS Provider CA
        Validity
            Not Before: Jan 30 14:05:05 2018 GMT
            Not After : Jan 31 14:05:05 2018 GMT
        Subject: C=US, O=Airspan Networks, OU=WInnForum SAS Provider Certificate, CN=expiredsascert.testlab.winnf.github.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:c2:0f:3b:31:6a:62:6e:cc:5a:5f:9d:0f:ff:36:
                    3f:de:12:98:c9:d0:c0:b9:7d:78:2e:9e:49:da:08:
                    a6:af:c8:e7:6c:b5:67:dd:b3:7a:92:b6:93:cc:a1:
                    13:21:ef:6f:1c:1d:12:aa:12:44:b2:22:36:02:2f:
                    e6:21:d6:f6:22:1f:0c:f2:c1:d5:a4:d2:3e:4e:52:
                    79:1a:c7:ba:4d:dd:96:8f:9d:d0:81:de:3d:1c:51:
                    0b:b5:2a:4c:56:c4:c3:94:9b:c4:7a:74:27:35:81:
                    51:c0:7f:64:e2:1f:4f:67:a1:c0:43:99:37:38:4e:
                    09:62:b6:de:3c:9c:8d:a6:7f:71:c1:c2:d2:06:73:
                    1c:79:5d:0d:5e:fc:3f:21:2a:50:f9:16:4d:78:52:
                    12:e0:a6:af:d0:8c:29:7c:06:60:82:04:a1:92:5c:
                    b4:3b:50:18:60:4b:48:b3:1a:d0:64:54:fa:bc:70:
                    c0:ac:c9:8a:4b:49:f7:33:e8:2b:f4:61:e4:8e:83:
                    49:25:c2:c2:ce:fc:cf:bd:91:04:a3:11:ce:37:91:
                    74:c3:55:54:71:ce:a8:ae:7e:7c:d1:73:72:e5:17:
                    ba:cb:3a:87:24:f4:47:52:d7:f7:d5:42:0b:e0:3e:
                    46:4f:0f:bf:a1:39:f0:10:4a:55:6c:0d:ec:5f:2e:
                    50:e1
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                3E:87:F5:57:E2:98:DD:2E:C2:8A:60:49:8E:DA:4B:1B:BB:E7:2B:96
            X509v3 Authority Key Identifier:
                keyid:E9:88:B4:B7:6C:39:CD:1B:9A:30:18:14:B6:2B:BA:15:6D:20:AA:95

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies:
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.1

            X509v3 Subject Alternative Name:
                DNS:mocksas.testharness.cbsd.winnf.github.com, othername:<unsupported>
    Signature Algorithm: sha256WithRSAEncryption
         b9:f4:74:fa:6d:58:f6:0a:76:c9:90:46:c3:d6:e3:30:97:da:
         33:e7:79:d3:d5:bd:ee:91:8f:a1:8b:48:cc:95:1b:49:d9:50:
         b6:45:28:b5:a1:4e:74:68:61:9e:58:0e:9a:3f:b2:0b:29:b1:
         87:91:db:8b:27:ca:8e:cb:32:79:7d:b2:14:1b:73:7f:e6:ed:
         dd:4f:93:8e:a9:b8:81:93:15:91:ed:2b:de:a3:56:61:f2:a6:
         e0:1b:45:13:49:c5:49:ed:c2:c8:4f:35:13:5c:84:8e:5e:53:
         ab:75:a5:57:3f:94:71:63:f7:c2:d5:25:0c:fb:4e:85:f0:c8:
         d0:e4:de:5a:5e:04:b2:e2:3d:74:f6:9d:6d:c8:1b:61:c9:63:
         17:3c:5d:d5:a6:73:cf:3e:4c:03:92:28:ae:5e:c2:33:c6:61:
         3f:d6:29:5e:fb:a9:cb:81:a5:a0:d2:fe:38:0b:01:a2:ac:41:
         fb:b1:99:26:24:5c:4a:13:c5:1e:7c:3f:e5:77:e3:bb:4a:ef:
         41:f9:f0:9a:7f:b4:a8:f3:71:d4:7a:78:13:94:8c:b5:94:47:
         30:e9:31:98:23:cc:ac:37:5a:63:b8:b7:15:31:44:f0:0c:1c:
         db:10:a0:d5:cf:d7:ae:1f:f4:90:82:42:32:3b:28:50:92:f8:
         a9:9e:b4:f0:59:ed:e2:96:8b:21:9a:63:8f:5c:81:22:46:2b:
         7f:eb:fb:2b:38:55:78:74:6a:f9:39:7c:9f:17:4d:d6:87:e1:
         e9:5b:8e:a9:dc:fb:a5:66:b3:c0:ea:d3:ee:f4:cc:32:28:80:
         8d:9e:f9:57:9a:47:02:14:7d:7f:c3:bf:6d:0d:55:08:be:c0:
         df:b3:8f:58:56:50:f4:04:a6:6f:ab:50:5f:04:70:19:09:b0:
         56:44:d6:f0:16:fe:45:78:83:5d:cd:45:44:01:fd:a5:5b:ef:
         9b:87:ef:7c:a6:7b:08:44:7c:ff:47:72:8c:07:f8:34:09:2a:
         40:d4:d1:ea:c9:9e:6f:a8:70:9a:77:60:a1:2e:5a:8f:db:b2:
         c8:4b:91:34:f7:aa:25:91:2a:9d:3e:73:6c:bc:de:d0:f1:45:
         b8:95:3c:17:c8:e4:d2:d0:7f:f6:d6:2f:33:5a:c8:72:c3:28:
         0d:c0:d3:43:4e:98:0c:2e:51:3d:7a:b6:5b:71:b0:d2:f4:3d:
         ac:5e:11:78:7f:76:16:a3:3f:47:6b:d4:a7:7e:03:ca:cc:68:
         6c:4b:14:85:df:5d:aa:1b:63:8f:e1:16:cc:d0:9d:4b:30:7a:
         8d:5d:29:60:65:9f:97:d6:02:05:18:15:78:73:6b:9b:8b:8c:
         6d:c0:ef:93:02:27:07:21


Step 36) generate RSA private key for SAS Provider certificate with CRL extensions (for negative security test cases) 

openssl genrsa -out sascrlcertprivkey.key 2048 

Step 37) generate a CSR for SAS Provider certificate with CRL extensions

openssl req -new -key sascrlcertprivkey.key -out sascrlcertcsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:WInnForum SAS Provider Certificate
Common Name (eg, your name or your server's hostname) []:sascertwithcrl.testlab.winnf.github.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 38) sign the CSR of SAS Provider certificate with CRL extensions with SAS Provider CA

openssl x509 -req -in sascrlcertcsr.csr -CA sascacert.pem -CAkey sascapriv.key -CAcreateserial -out sascrlcert1.pem -days 180 -sha256 -extfile /home/opensslcbrs1.cnf -extensions sas_cert_with_crl 

Step 39) verify SAS Provider certificate with CRL extensions parameters

openssl x509 -in sascrlcert1.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 10177691706620776698 (0x8d3e6caef69210fa)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA SAS Provider CA9001, CN=WInnForum RSA SAS Provider CA
        Validity
            Not Before: Jan 30 15:32:43 2018 GMT
            Not After : Jul 29 15:32:43 2018 GMT
        Subject: C=US, O=Airspan Networks, OU=WInnForum SAS Provider Certificate, CN=sascertwithcrl.testlab.winnf.github.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:cd:48:be:c4:ee:36:85:b0:19:a4:47:dd:31:35:
                    b1:5f:fe:98:15:22:a7:fc:7d:2d:8a:5b:0e:66:c6:
                    fc:a9:74:cd:83:f9:c0:83:b2:62:14:63:42:73:e2:
                    99:84:1f:56:b0:98:6e:f8:eb:e3:8b:33:99:f2:3a:
                    b3:dc:c1:ce:c2:77:2d:86:cb:5c:5a:eb:dc:b3:7c:
                    ca:73:49:fd:19:7c:4d:85:8a:b6:7a:2a:d7:e9:24:
                    a8:3b:4b:63:8e:9a:b7:84:63:2c:e9:58:49:9b:b5:
                    68:a6:d7:f6:3b:8c:50:04:b7:b9:bf:11:53:cc:b0:
                    d4:b3:b8:21:be:29:c8:e4:21:d8:d7:7e:31:d6:bd:
                    85:c6:3f:b7:c4:0c:d4:64:39:7f:77:c8:d7:a7:0c:
                    4a:44:b5:98:b3:8f:06:f6:f6:6a:41:9d:03:da:85:
                    d2:9a:d6:17:fa:b5:fe:46:b0:1d:75:bc:fc:92:09:
                    a2:ef:54:70:c6:de:66:06:5e:e3:df:d6:76:2c:b4:
                    e9:a3:5e:16:53:15:ef:98:6d:f2:0c:da:11:06:c4:
                    5c:d4:bd:34:8e:79:a5:ad:83:13:27:13:73:bf:b3:
                    96:38:45:ad:87:55:ca:e9:84:8d:94:3c:ab:5d:cd:
                    e4:2c:56:32:c8:87:01:f1:18:a4:70:e1:2e:1f:80:
                    7a:1b
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                31:AA:1E:2A:64:FB:11:8D:12:1F:48:46:B2:99:4A:0E:B6:37:10:C3
            X509v3 Authority Key Identifier:
                keyid:E9:88:B4:B7:6C:39:CD:1B:9A:30:18:14:B6:2B:BA:15:6D:20:AA:95

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies:
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.1

            X509v3 Subject Alternative Name:
                DNS:sascertcrl.testharness.cbsd.winnf.github.com, othername:<unsupported>
            Authority Information Access:
                OCSP - URI:http://ocsp.testharness.cbsd.winnf.github.com/

            X509v3 CRL Distribution Points:

                Full Name:
                  URI:http://testharness.cbsd.winnf.com/crlserver.crl

    Signature Algorithm: sha256WithRSAEncryption
         87:63:eb:96:7c:6a:ee:5e:01:c6:44:0f:bd:8f:b5:7f:7b:b4:
         37:4b:02:94:68:49:f8:b4:ce:80:ff:51:43:70:ea:35:6b:d0:
         1c:e8:97:a4:53:79:b6:4f:7f:2d:8a:21:a8:80:1b:a1:fe:1f:
         95:54:2f:36:41:46:89:41:68:f4:5b:a4:94:1b:45:c1:ec:c3:
         4f:a5:f8:1d:ba:dd:89:67:0a:a2:33:a3:74:0a:5b:50:75:df:
         2d:51:5b:fd:5b:3e:6b:ee:46:17:de:b5:5c:1d:9a:5d:92:4e:
         6b:35:8c:7d:23:7d:49:25:0a:61:f5:f9:a7:3f:26:a8:df:46:
         49:68:34:8f:f4:6a:d5:29:7a:1d:0d:7f:24:32:92:00:4a:3b:
         8b:1d:6f:8b:b7:70:9a:e5:ee:53:3a:a6:7d:97:e6:08:28:6d:
         02:c5:63:8c:d4:aa:ce:0e:e4:04:37:21:ea:96:55:bf:22:0c:
         fd:1d:d5:45:45:1f:18:ea:24:8a:87:21:ef:f9:fb:f5:33:8b:
         3f:01:c3:e5:73:2e:94:43:01:4b:86:12:5e:57:70:a8:24:93:
         cb:62:75:ea:d2:25:8f:18:83:ef:24:d2:e3:6c:23:30:90:77:
         90:0b:42:df:ed:d7:c4:b8:1a:f0:bd:bc:5d:be:9c:99:3e:6f:
         7e:fb:24:64:71:3c:0f:4c:4a:ac:4a:08:2e:72:3a:e0:6d:82:
         d8:9f:fe:a0:ae:d3:12:01:e0:b6:69:d7:7a:a9:aa:2e:8c:10:
         02:fe:c0:2e:43:72:eb:bd:bc:ea:7d:25:e7:92:22:8a:05:c9:
         94:4f:e8:dd:23:58:87:ed:84:03:46:ef:10:43:7d:54:83:a7:
         4a:8b:72:59:b1:9a:c9:26:dd:68:fb:1f:bb:d2:a9:51:22:2e:
         44:04:5b:30:86:d6:c3:bf:8a:f6:d7:dc:27:d5:c5:45:67:83:
         e0:75:b4:25:37:60:26:56:ce:f1:ea:08:d4:17:c9:73:7d:44:
         f8:1d:90:3b:a4:94:da:20:9b:4a:50:ed:45:e9:f7:ab:e3:53:
         54:8f:1d:0c:dd:b1:d1:93:92:4f:21:97:9b:e1:8d:cf:b9:b7:
         24:05:ce:f6:a1:38:bf:04:94:97:79:15:77:09:95:01:24:10:
         46:d4:20:c8:b5:de:a3:10:a5:c9:3f:36:d3:5d:d0:3f:8b:8f:
         8b:b6:e8:95:c1:b6:44:b8:60:d5:ff:1a:94:50:e2:1e:eb:1a:
         3b:71:27:c4:c8:1f:ff:0e:34:d1:ea:fa:6a:14:fb:3e:81:eb:
         72:b5:2c:d8:73:7d:b8:83:df:43:82:53:4c:3c:a0:fd:f8:e8:
         0b:5d:61:20:88:6a:f5:df

Step 40) Copy the PEM file of the SAS Provider certificate (for SAS Test Harness regular testing) to a new file name sascorruptedcert.pem 

Step 41) Modify the new PEM file sascorruptedcert.pem in order to make it a SAS Provider certificate which is corrupted with invalid signature (for negative security test cases)
#######################################################################################################################
# This is done according to https://security.stackexchange.com/questions/60804/creating-an-x-509-certificate-with-an-invalid-signature
# Modify in the last line of the PEM file one letter in order to make the certificate signature invalid. The {public key,private key} pair of the certificate remain intact.
#######################################################################################################################

Original PEM file of SAS Provider certificate (for SAS Test Harness regular testing):

-----BEGIN CERTIFICATE-----
MIIFTTCCAzWgAwIBAgIJAI0+bK72khD3MA0GCSqGSIb3DQEBCwUAMHIxCzAJBgNV
BAYTAlVTMRkwFwYDVQQKDBBBaXJzcGFuIE5ldHdvcmtzMSAwHgYDVQQLDBdSU0Eg
U0FTIFByb3ZpZGVyIENBMDAwMTEmMCQGA1UEAwwdV0lubkZvcnVtIFJTQSBTQVMg
UHJvdmlkZXIgQ0EwHhcNMTgwMTI5MTAwNjMzWhcNMTgwNzI4MTAwNjMzWjCBiDEL
MAkGA1UEBhMCVVMxITAfBgNVBAoMGFRlc3QgTGFiIGZvciBGQ0MgUEFSVCA5NjEr
MCkGA1UECwwiV0lubkZvcnVtIFNBUyBQcm92aWRlciBDZXJ0aWZpY2F0ZTEpMCcG
A1UEAwwgbW9ja3Nhcy50ZXN0bGFiLndpbm5mLmdpdGh1Yi5jb20wggEiMA0GCSqG
SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC86TC3dYOxQfmqJr7Hb8n39OaP8hIckymW
mwU2r95Ij6vV52qGvmd9L0QFS4Q+OQCmgbfaOHGeOCJ9zb9BketPxR2tM02E3zqR
L++V6viMnIH9rriTp/h1j5K1rR1fIDDskjk6Bd1Vz/RNX6esc/PZ+3/0LY5DKXWX
U8qTjOmvfaOyaX1/PVLmRBa9u6WeeIqshyvm3FqArzchd4DLeBcyVo0PH/HqRLd4
uRPKFb8w9xIuYo3q1HW/O+Wni2IqKs+X5vIcrnc1otBgjHSqUeafW1ik/FLBjMW5
iIDd2vEfaEaXT3SQzN6VpfIZRJ2RzS55MC37yp89pYXaMNm1X9bRAgMBAAGjgc4w
gcswHQYDVR0OBBYEFDmFfN3tboRIbgujIi+QmQxswMKPMB8GA1UdIwQYMBaAFOmI
tLdsOc0bmjAYFLYruhVtIKqVMA4GA1UdDwEB/wQEAwIFoDAmBgNVHSAEHzAdMAwG
CisGAQQBguwRAgEwDQYLKwYBBAGC7BEBAQEwUQYDVR0RBEowSIIpbW9ja3Nhcy50
ZXN0aGFybmVzcy5jYnNkLndpbm5mLmdpdGh1Yi5jb22gGwYKKwYBBAGC7BEBBqAN
DAtNb2NrU0FTIEZSTjANBgkqhkiG9w0BAQsFAAOCAgEAg/QZckHRTRn7NA03zpPu
03zU6MPFZo7ST5iN7L1LNVU2uXjHJD0Zq/Ogs1Aczop/ljkeImG4nfBhBnOn9Lic
40oGY7AcTinSQWjLVWHhUC4Ig0IW0FAwannbeN9SYq4KLHkODu6loJQf5bRR7UuI
lpJ3o3lTx4uOnGrorKjHgLNg/FRV6XZbfAnbgMeJ5K2V75XRdNnfMHp0NpZMFy20
BiuRkH2tlZUSfFDW3X73JdQzI41YcxjBGLI/ftFNzw8+qtJsXBqPC/9i+y3ZZOiq
5BhP4+r/L5d5N2gwk5oC9JtxjyBm+rE9waQonn9jatcY6ZCYpB53ukwDRMpDc21J
IDEBU7hKaijOWh9DGES0tZXP4YyM7Rif456Te95xP4y+VUuyqqxJgmQrT33lK+Hy
zfOh5FeagKCGFdLyOFyO+kfbeKyQ4dJh7lxCE44TS4LAzqRf2PXgUw1+rbSKs2Yl
Bx4WRLk8NmilJd0fVSCH7G/ND0S1wiZbJ7OFfiZjoV+vxhODLzp1ReixJRkWk5VX
9+XcS1ostmTDPt8CoIYcBJqBg+IUqi4m1Y0KXbngDrx8DB/TMscOCtggu0H8mRzz
2CXDoCP/58Ibcv/JQvnVI7yaUCWJ71fjFQg/fupe+8CMfzOlDQcaaQpQ2E4Q01Dy
rktZbGGHGtY3lqsEauYqb48=
-----END CERTIFICATE-----		 

File sascorruptedcert.pem modified PEM file of the SAS Provider certificate which is corrupted with invalid signature (for negative security test cases):

-----BEGIN CERTIFICATE-----
MIIFTTCCAzWgAwIBAgIJAI0+bK72khD3MA0GCSqGSIb3DQEBCwUAMHIxCzAJBgNV
BAYTAlVTMRkwFwYDVQQKDBBBaXJzcGFuIE5ldHdvcmtzMSAwHgYDVQQLDBdSU0Eg
U0FTIFByb3ZpZGVyIENBMDAwMTEmMCQGA1UEAwwdV0lubkZvcnVtIFJTQSBTQVMg
UHJvdmlkZXIgQ0EwHhcNMTgwMTI5MTAwNjMzWhcNMTgwNzI4MTAwNjMzWjCBiDEL
MAkGA1UEBhMCVVMxITAfBgNVBAoMGFRlc3QgTGFiIGZvciBGQ0MgUEFSVCA5NjEr
MCkGA1UECwwiV0lubkZvcnVtIFNBUyBQcm92aWRlciBDZXJ0aWZpY2F0ZTEpMCcG
A1UEAwwgbW9ja3Nhcy50ZXN0bGFiLndpbm5mLmdpdGh1Yi5jb20wggEiMA0GCSqG
SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC86TC3dYOxQfmqJr7Hb8n39OaP8hIckymW
mwU2r95Ij6vV52qGvmd9L0QFS4Q+OQCmgbfaOHGeOCJ9zb9BketPxR2tM02E3zqR
L++V6viMnIH9rriTp/h1j5K1rR1fIDDskjk6Bd1Vz/RNX6esc/PZ+3/0LY5DKXWX
U8qTjOmvfaOyaX1/PVLmRBa9u6WeeIqshyvm3FqArzchd4DLeBcyVo0PH/HqRLd4
uRPKFb8w9xIuYo3q1HW/O+Wni2IqKs+X5vIcrnc1otBgjHSqUeafW1ik/FLBjMW5
iIDd2vEfaEaXT3SQzN6VpfIZRJ2RzS55MC37yp89pYXaMNm1X9bRAgMBAAGjgc4w
gcswHQYDVR0OBBYEFDmFfN3tboRIbgujIi+QmQxswMKPMB8GA1UdIwQYMBaAFOmI
tLdsOc0bmjAYFLYruhVtIKqVMA4GA1UdDwEB/wQEAwIFoDAmBgNVHSAEHzAdMAwG
CisGAQQBguwRAgEwDQYLKwYBBAGC7BEBAQEwUQYDVR0RBEowSIIpbW9ja3Nhcy50
ZXN0aGFybmVzcy5jYnNkLndpbm5mLmdpdGh1Yi5jb22gGwYKKwYBBAGC7BEBBqAN
DAtNb2NrU0FTIEZSTjANBgkqhkiG9w0BAQsFAAOCAgEAg/QZckHRTRn7NA03zpPu
03zU6MPFZo7ST5iN7L1LNVU2uXjHJD0Zq/Ogs1Aczop/ljkeImG4nfBhBnOn9Lic
40oGY7AcTinSQWjLVWHhUC4Ig0IW0FAwannbeN9SYq4KLHkODu6loJQf5bRR7UuI
lpJ3o3lTx4uOnGrorKjHgLNg/FRV6XZbfAnbgMeJ5K2V75XRdNnfMHp0NpZMFy20
BiuRkH2tlZUSfFDW3X73JdQzI41YcxjBGLI/ftFNzw8+qtJsXBqPC/9i+y3ZZOiq
5BhP4+r/L5d5N2gwk5oC9JtxjyBm+rE9waQonn9jatcY6ZCYpB53ukwDRMpDc21J
IDEBU7hKaijOWh9DGES0tZXP4YyM7Rif456Te95xP4y+VUuyqqxJgmQrT33lK+Hy
zfOh5FeagKCGFdLyOFyO+kfbeKyQ4dJh7lxCE44TS4LAzqRf2PXgUw1+rbSKs2Yl
Bx4WRLk8NmilJd0fVSCH7G/ND0S1wiZbJ7OFfiZjoV+vxhODLzp1ReixJRkWk5VX
9+XcS1ostmTDPt8CoIYcBJqBg+IUqi4m1Y0KXbngDrx8DB/TMscOCtggu0H8mRzz
2CXDoCP/58Ibcv/JQvnVI7yaUCWJ71fjFQg/fupe+8CMfzOlDQcaaQpQ2E4Q01Dy
rktZbGGHGtY3lqsEauZqb48=
-----END CERTIFICATE-----

#######################################################################################################################
# The following was modified in the last line of the PEM file: The last letter Y was changed to Z
# original PEM file last line: rktZbGGHGtY3lqsEauYqb48=
# modified PEM file last line: rktZbGGHGtY3lqsEauZqb48=
#######################################################################################################################
		 
######################################################################################################################
# Fourth action for test lab is to create a unified PEM file containing SAS Provider Certificate together with its relevant SAS Provider CA (meaning the SAS Provider CA which signed the SAS Provider Certificate)
# This is according to WINNF-17-S-0022 so during TLS message authentication SAS Harness will send to CBSD/Domain Proxy UUT both the:
# 1) SAS Harness SAS Provider Certificate   
# 2) SAS Provider CA which signed the SAS Provider Certificate
# unified PEM files are: 
# 1) SAS Provider certificate together with the SAS Provider CA
# 2) SAS Provider certificate of Unknown CA together with the SAS Provider CA  (Please note not to combine with the SAS Provider Unknown CA)
# 3) SAS Provider certificate with expired validity time together with the SAS Provider CA
# 4) SAS Provider certificate with CRL extensions together with the SAS Provider CA
# 5) SAS Provider certificate which is corrupted with invalid signature together with the SAS Provider CA
#
# in the SAS Test Harness conf.xml file in directory \cbrsPython-master\Configuration put the following:
# 1) private key in <keyFilePath>certificates/sas_private_key.key</keyFilePath> 
# 2) Unified PEM file of SAS Provider Certificate together with its relevant SAS Provider CA in <pemFilePath>certificates/sas_certificate.pem</pemFilePath>
# 3) Root CA in <caCerts>certificates/rootCA_certificate.pem</caCerts>    
#######################################################################################################################

Step 42) concatenate the PEM files of SAS Provider certificate together with SAS Provider CA to create a unified PEM file

-----BEGIN CERTIFICATE-----
    
	< SAS Provider certificate >
	
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
    
	< SAS Provider CA >

-----END CERTIFICATE-----   

Step 43) concatenate the PEM files of SAS Provider certificate of Unknown CA together with the SAS Provider CA to create a unified PEM file (Please note not to combine with the SAS Provider Unknown CA)

-----BEGIN CERTIFICATE-----
    
	< SAS Provider certificate of Unknown CA >
	
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
    
	< SAS Provider CA >

-----END CERTIFICATE-----   

Step 44) concatenate the PEM files of SAS Provider certificate with expired validity time together with the SAS Provider CA to create a unified PEM file

-----BEGIN CERTIFICATE-----
    
	< SAS Provider certificate with expired validity time >
	
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
    
	< SAS Provider CA >

-----END CERTIFICATE-----   

Step 45) concatenate the PEM files of SAS Provider certificate with CRL extensions together with the SAS Provider CA to create a unified PEM file

-----BEGIN CERTIFICATE-----
    
	< SAS Provider certificate with CRL extensions >
	
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
    
	< SAS Provider CA >

-----END CERTIFICATE-----   

Step 46) concatenate the PEM files of SAS Provider certificate which is corrupted with invalid signature together with the SAS Provider CA to create a unified PEM file

-----BEGIN CERTIFICATE-----
    
	< SAS Provider certificate which is corrupted with invalid signature >
	
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
    
	< SAS Provider CA >

-----END CERTIFICATE-----   
	 
######################################################################################################################
# Fifth action for test lab is to create the CPI certificate (for test cases where UUT sends CPI Signed Data)
# CPI certificate is signed by the Professional Installer CA created in previous action
# 1) CPI private key will be given to vendor of UUT at the time of actual testing in test lab premises in order for UUT to create CPI Signed Data
# 2) CPI certificate (with the public key) remains for SAS Test Harness. 
# In SAS Harness conf.xml file in directory \cbrsPython-master\Configuration put the following: CPI certificate PEM file in <cpiCert>certificates/cpi_certificate.pem</cpiCert>
#######################################################################################################################

Step 47) generate RSA private key for CPI certificate (for test cases where UUT sends CPI Signed Data)

openssl genrsa -out cpicertprivkey.key 2048

Step 48) generate a CSR for CPI certificate

openssl req -new -key cpicertprivkey.key -out cpicertcsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:WInnForum Installer Certificate
Common Name (eg, your name or your server's hostname) []:cpi9001

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 49) sign the CSR of CPI certificate with Professional Installer CA

openssl x509 -req -in cpicertcsr.csr -CA cpicacert.pem -CAkey cpicaprivkey.key -CAcreateserial -out cpicert.pem -days 180 -sha256 -extfile /home/opensslcbrs1.cnf -extensions cpi_cert

Step 50) verify CPI certificate parameters

openssl x509 -in cpicert.pem  -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 10371510245694844664 (0x8fef019e2af72ef8)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA Professional Installer CA9001, CN=WInnForum RSA Professional Installer CA
        Validity
            Not Before: Mar  1 15:49:43 2018 GMT
            Not After : Aug 28 15:49:43 2018 GMT
        Subject: C=US, O=Airspan Networks, OU=WInnForum Installer Certificate, CN=cpi9001
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:c5:60:41:41:dd:90:3b:00:dc:71:58:72:62:65:
                    d2:77:8a:8b:81:eb:33:66:31:1a:1c:b1:9f:51:5c:
                    1f:8e:e1:26:21:24:08:a9:7c:5b:58:7a:1f:14:41:
                    32:80:bb:a0:8a:03:f0:40:5f:e4:da:2d:b2:34:85:
                    bb:05:b4:4f:24:97:ab:16:70:43:60:42:22:ba:ff:
                    13:89:9a:c7:8c:d6:06:8d:07:89:47:b5:1e:15:a2:
                    0f:c3:5f:32:b6:58:3a:aa:2f:e9:36:b4:eb:87:97:
                    6b:a0:34:52:ea:9f:8b:98:7b:f9:c7:94:42:d1:fb:
                    02:c4:21:b5:69:57:24:19:45:7a:c6:64:39:ff:76:
                    9d:a0:12:02:4b:00:bd:36:f1:85:16:15:76:ad:cf:
                    81:92:78:97:8d:8e:a8:c1:14:56:17:a7:61:b8:43:
                    d2:80:7c:7b:7b:bb:13:ab:8c:94:35:09:e1:61:cb:
                    b6:1f:60:44:00:6d:3b:11:5f:88:ad:50:7e:d3:57:
                    79:c7:72:9f:30:f9:ef:23:e9:ff:00:7a:f6:d5:18:
                    1a:5e:bd:64:c9:9f:d3:e4:a8:2d:29:04:dc:60:f0:
                    45:f2:a9:2d:f4:bb:36:7f:b0:ef:d8:2a:11:9f:3d:
                    d3:78:42:c2:2c:64:56:c2:3a:04:eb:82:cf:49:87:
                    3d:75
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                B1:E2:77:13:CD:C8:22:C3:02:BF:A8:80:8A:CD:F4:04:52:CC:41:CD
            X509v3 Authority Key Identifier: 
                keyid:50:58:41:95:08:07:F2:F1:32:0C:53:7A:36:D4:29:D0:21:A5:D4:70

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.2

            X509v3 Subject Alternative Name: 
                othername:<unsupported>
    Signature Algorithm: sha256WithRSAEncryption
         04:a0:97:c0:49:b7:9a:c7:a1:3a:32:75:0b:81:f6:d9:f5:be:
         a5:f8:7c:eb:61:3d:4f:ac:9c:68:99:7e:fe:0b:46:7e:a7:50:
         7c:fc:4b:5b:3e:38:f7:81:d6:ad:2e:26:fe:f7:a1:c2:91:dd:
         26:27:47:9f:c5:56:4e:03:19:a5:a8:42:72:b0:e6:ba:64:b9:
         b1:08:0a:c6:72:0f:ac:6f:6a:3d:21:35:62:d6:30:ab:e0:02:
         47:ff:a3:d8:99:24:dd:72:84:8e:31:38:b4:c2:5e:20:aa:52:
         69:b0:47:74:f4:3c:22:a9:d0:e6:8e:2f:30:ae:51:7a:e9:2c:
         f6:77:ff:09:4b:bd:b7:10:6f:4a:c2:98:46:c6:81:fd:d8:71:
         ca:8f:82:c1:f1:7f:a6:98:65:92:89:d4:ce:21:21:e8:c6:4c:
         40:4d:c8:2d:37:34:fb:e6:85:6e:46:05:78:19:21:ec:06:24:
         98:44:ec:b3:d5:03:2f:64:2e:ee:a7:20:26:34:c3:22:3c:5f:
         bf:8f:3f:3b:3a:c6:9f:df:e6:b5:1a:b9:ba:8b:10:22:fd:a6:
         5e:c3:68:25:7c:12:c2:10:59:ab:c9:bd:55:a3:cc:3b:b1:d6:
         55:4a:e5:27:d5:78:03:73:fc:4a:b6:93:52:ee:ec:5a:29:18:
         63:77:43:cb:9b:72:28:ef:6d:ca:9f:93:4e:99:20:fd:0e:ec:
         3f:6e:c2:b2:b4:ae:20:e5:e7:3f:84:cf:22:ca:c1:e3:85:90:
         49:07:c3:30:af:25:9e:ca:64:a1:7c:a6:88:12:28:ec:e8:fa:
         f0:64:dd:5e:01:53:ba:66:a7:a9:ba:8b:12:9b:c9:13:84:0f:
         2c:63:06:64:c8:10:9d:fa:aa:5d:ec:d6:bf:89:4c:e3:1d:19:
         81:de:23:eb:e7:28:b0:93:f0:3a:64:cd:82:4c:8a:74:27:20:
         02:23:67:71:76:4c:a0:fa:c3:11:7d:8e:6c:10:00:c8:66:4c:
         c7:65:b8:70:db:22:7d:e7:7f:8c:b6:d9:c3:c5:99:3a:2b:d6:
         bc:16:dd:66:3b:1e:b6:a4:45:94:34:c8:f9:23:fb:28:ff:08:
         85:8c:11:bd:e9:ca:6e:33:af:f2:ba:e8:04:5a:8b:24:c3:f5:
         c6:2f:b9:31:31:07:cf:5b:11:44:f1:86:a1:38:30:be:c2:be:
         9c:0f:5d:98:37:e0:a0:df:04:07:d6:70:c9:c2:7c:96:7f:39:
         45:5c:1a:8b:59:7b:a4:a6:d8:20:4c:6c:46:c6:0c:f4:78:dd:
         04:4b:2b:19:cb:d3:ad:2a:a9:41:2a:e7:07:da:c3:ec:be:66:
         fd:e3:fe:f5:cc:a0:ab:3b

	 
######################################################################################################################
# Sixth action for test lab is to create the Certificate Revocation List (CRL file) for negative security test cases
# Certificate Revocation List will have SAS Provider certificate with CRL extensions created in previous action. This means that the SAS Provider certificate with CRL extensions is Revoked for use.
# SAS Provider certificate with CRL extensions created in previous action has the following X509v3 CRL Distribution Points:
# Full Name: URI:http://testharness.cbsd.winnf.com/crlserver.crl
# This means the Certificate Revocation List file name needs to be crlserver.crl and to be placed in an HTTP server with an FQDN testharness.cbsd.winnf.com  
#######################################################################################################################

Step 51) Search the opensslcbrs1.cnf file for the [ CA_default ] section for the general directory  
######################################################################################################################
# this section points to the directory on the machine running the openssl commands where the following files need to be places:
# 1) index.txt
# 2) crlnumber
# In the opensslcbrs1.cnf file appearing at the end of this Readme file the general directory is /etc/pki/CA according to the following [ CA_default ] section: 
#       [ CA_default ]
#       dir		= /etc/pki/CA
#       database	= $dir/index.txt
#       crlnumber	= $dir/crlnumber	
#######################################################################################################################

Step 52) create an empty file index.txt and place it in the general directory given in the [ CA_default ] section

Step 53) create a file crlnumber with content 01 (single text line) and place it in the general directory given in the [ CA_default ] section

Step 54) generate an empty Certificate Revocation List issued by the SAS Provider CA

openssl ca -config /home/opensslcbrs1.cnf -gencrl -keyfile sascapriv.key -cert sascacert.pem -out emptycrl.crl

Step 55) verify the empty Certificate Revocation List parameters

openssl crl -text -noout -in emptycrl.crl

Certificate Revocation List (CRL):
        Version 2 (0x1)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: /C=US/O=Airspan Networks/OU=RSA SAS Provider CA9001/CN=WInnForum RSA SAS Provider CA
        Last Update: Mar 15 16:08:50 2018 GMT
        Next Update: Apr 14 16:08:50 2018 GMT
        CRL extensions:
            X509v3 CRL Number:
                1
No Revoked Certificates.
    Signature Algorithm: sha1WithRSAEncryption
         5b:c0:78:27:2a:fb:7b:a7:45:72:ca:f1:a6:3d:75:43:79:a1:
         ea:5e:06:6a:19:9a:b4:08:27:65:f5:e5:21:c6:4e:c0:64:b5:
         b3:d1:8b:93:ac:54:b9:c4:c9:95:32:98:71:80:18:25:19:c5:
         88:80:7f:32:0c:e0:5f:4c:ad:d2:8e:8c:d3:47:5c:5d:b2:66:
         51:89:a9:7b:c9:c9:0f:7e:3b:b9:7b:be:8c:96:fc:4e:21:a3:
         74:20:fe:e8:b8:31:5b:13:15:e8:8f:14:f5:35:a6:02:5b:a4:
         d8:d7:28:db:e2:22:b8:65:28:25:e2:e6:dc:54:df:af:1f:8b:
         c9:ac:9b:84:3d:1c:6e:af:ed:07:6e:1a:da:a0:1e:3a:13:e7:
         2b:0d:97:65:c0:26:8b:13:7f:18:2c:70:62:cf:5d:d3:d1:87:
         f3:7a:31:95:c1:2d:d2:84:0e:9e:c5:39:bc:70:9b:8e:99:db:
         b5:85:22:1b:27:76:3f:49:ac:e8:28:4a:9d:df:76:c3:83:43:
         cc:fc:41:ac:06:50:ae:bf:9e:43:60:26:4c:cd:d7:70:86:ad:
         b4:75:74:93:10:86:b8:71:0a:3d:b5:5e:4d:0e:ec:d9:6f:46:
         51:8b:4a:75:f0:89:6c:8a:56:6a:24:bc:49:55:6f:29:ee:de:
         81:05:34:1f:70:a3:a3:0f:84:6a:db:e8:fb:5c:a1:96:60:c0:
         9d:38:1e:1e:38:6a:0d:4b:b3:e3:27:5c:07:bb:77:ef:4e:38:
         a9:dc:61:8d:23:16:45:72:9b:84:56:8e:a3:46:43:30:f9:d8:
         65:49:f5:8e:03:64:ec:05:7b:6e:3f:a1:eb:bc:06:47:9d:ec:
         87:07:44:92:7f:1c:7a:51:39:80:00:d5:8d:ad:44:1d:29:1f:
         16:1e:12:91:be:7a:62:6d:a3:d7:e3:67:d9:2d:39:05:55:ef:
         f0:f4:6b:a5:7a:a2:82:2c:37:fe:11:fb:eb:d1:e8:70:21:33:
         e7:a2:11:3b:73:c0:c0:76:d9:21:fa:74:c6:3b:95:6c:90:18:
         f0:79:e9:ae:84:e3:12:52:b7:a2:99:b3:32:7d:e9:58:a6:b9:
         63:de:d8:3e:53:d5:d0:88:67:da:de:ba:a7:1a:2f:97:5c:eb:
         a4:3b:11:b2:d6:4e:75:d3:c4:21:c6:a7:de:91:dd:d8:09:56:
         22:ef:83:d9:80:4d:2d:c8:0e:7b:7d:7a:35:b0:bf:50:66:70:
         c2:e8:59:b3:cc:83:38:c4:c5:aa:cd:48:33:69:87:31:82:7e:
         3d:d1:f6:87:82:b1:ee:67:17:ce:a7:67:c7:3a:05:a5:62:64:
         2b:f2:d0:b9:2c:a2:df:23

Step 56) revoke the SAS Provider certificate with CRL extensions issued by the SAS Provider CA

openssl ca -revoke sascrlcert1.pem -config /home/opensslcbrs1.cnf -keyfile sascapriv.key -cert sascacert.pem

Using configuration from /home/opensslcbrs1.cnf
Adding Entry with serial number 8D3E6CAEF69210FA to DB for /C=US/O=Airspan Networks/OU=WInnForum SAS Provider Certificate/CN=sascertwithcrl.testlab.winnf.github.com 
Revoking Certificate 8D3E6CAEF69210FA.
Data Base Updated

#######################################################################################################################
# Following the revocation there is an update to content of the files index.txt and crlnumber located in the general directory: 
# index.txt is showing the serial number of the revoked certificate with an R indication
# crlnumber is updated from 01 to 02
#######################################################################################################################

Step 57) generate a new Certificate Revocation List issued by the SAS Provider CA

openssl ca -config /home/opensslcbrs1.cnf -gencrl -keyfile sascapriv.key -cert sascacert.pem -out crlserver.crl

Step 58) verify the new Certificate Revocation List parameters

openssl crl -text -noout -in crlserver.crl

Certificate Revocation List (CRL):
        Version 2 (0x1)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: /C=US/O=Airspan Networks/OU=RSA SAS Provider CA9001/CN=WInnForum RSA SAS Provider CA
        Last Update: Mar 15 16:28:51 2018 GMT
        Next Update: Apr 14 16:28:51 2018 GMT
        CRL extensions:
            X509v3 CRL Number:
                2
Revoked Certificates:
    Serial Number: 8D3E6CAEF69210FA
        Revocation Date: Mar 15 16:23:57 2018 GMT
    Signature Algorithm: sha1WithRSAEncryption
         18:74:d1:78:08:69:0c:11:0e:bb:c5:8d:09:fb:ca:3d:52:12:
         d7:8f:98:7e:26:5c:b2:92:61:32:30:56:db:e4:1e:14:70:7c:
         77:1b:9a:7b:1d:57:98:43:7c:23:7f:c9:28:dd:26:f7:af:6d:
         f3:b3:5f:ca:6d:da:e0:23:62:14:4d:33:4f:f5:88:51:1b:03:
         db:0d:07:80:25:39:92:66:ab:7d:5e:2e:c3:82:7e:d5:94:96:
         8a:5d:cb:27:fe:06:5b:52:c0:e5:55:09:0a:fc:79:8f:5e:c2:
         60:84:ba:21:2f:05:0e:d9:14:64:fa:ae:32:94:dd:1e:0a:08:
         e1:4d:f9:63:75:4d:31:57:16:98:f2:5d:9b:e5:2d:f1:f0:17:
         65:59:a0:27:e9:a5:7c:db:dc:60:79:45:09:80:9a:0e:22:74:
         7f:81:33:ea:5e:5f:b4:3e:e9:5a:a8:5b:56:f1:3a:b7:5d:ec:
         7b:a6:34:b6:04:e3:4b:21:4c:21:02:96:88:d6:ed:03:8b:ac:
         52:db:3c:68:65:9f:90:c6:b2:16:eb:be:50:28:39:88:70:b7:
         d4:15:89:81:8a:39:04:be:f7:b8:0a:ea:2b:83:ec:57:28:d7:
         27:3c:3e:3a:ec:8e:b5:2b:53:a4:24:f5:7a:66:ea:ca:71:5a:
         cd:ff:e9:52:94:04:5d:04:6f:5c:7c:f7:d1:80:5d:22:92:25:
         47:6b:f5:fc:fe:11:81:81:47:c8:c9:6f:d0:ea:61:f3:45:79:
         3b:2c:23:00:c8:20:97:39:3e:49:34:14:76:66:88:7b:e0:a0:
         84:ec:e4:30:9a:43:f2:08:01:5f:a6:f8:63:03:f3:b8:35:44:
         d1:a7:6f:be:03:bd:ac:02:74:23:4e:17:b2:c5:d6:b3:84:d9:
         bb:e3:77:7b:67:d1:65:d6:6c:e9:04:bb:fc:39:13:c7:c8:c7:
         4b:e8:75:1b:9b:35:2c:f4:59:23:ff:89:a9:d8:40:ad:e8:cf:
         0e:0c:c3:7a:39:6c:ec:c1:03:75:45:1c:78:38:7e:a6:4a:81:
         98:21:95:6f:6e:ac:a0:b0:05:19:58:e2:d9:30:a2:79:16:fe:
         1f:df:ee:07:16:31:5c:66:6f:18:ee:e8:76:66:1c:a7:c1:69:
         90:45:e9:78:ea:13:1a:9d:6c:ee:e0:84:5b:b0:e3:95:42:d7:
         05:1c:68:94:43:c2:a8:a3:39:5b:cb:b7:a1:ec:d2:ad:73:3d:
         6f:07:a0:f5:12:22:86:3c:7d:68:3a:38:cd:77:36:95:75:63:
         db:ee:ba:dd:77:76:31:4e:72:8e:e6:0b:b7:f0:ec:e3:48:61:
         d0:87:e8:b1:a9:8b:54:17

#######################################################################################################################
# Following the revocation there is an update to content of the file crlnumber located in the general directory: 
# crlnumber is updated from 02 to 03
#######################################################################################################################
		 
Step 59) place the Certificate Revocation List file crlserver.crl in the HTTP server with an FQDN testharness.cbsd.winnf.com

#######################################################################################################################
# this makes the Certificate Revocation List file available for downloaded from the URI http://testharness.cbsd.winnf.com/crlserver.crl
# the update time for Certificate Revocation List is 30 days according to the parameter default_crl_days= 30 in the [ CA_default ] section  
# the negative security test case of SAS Provider certificate with CRL extensions needs to be executed within the validity time of the Certificate Revocation List (between the "Last Update" and "Next Update" appearing in the CRL)
#######################################################################################################################

######################################################################################################################
# At this point test lab finished generating its own required certificates and is now waiting for CBSD/Domain Proxy vendors to submit CSR to test lab
###################################################################################################################### 

###################################################################################################################### 
# CBSD Vendor wants to submit CBSD as UUT for test lab
# 1) CBSD vendor generates RSA private key for CBSD UUT certificate
# 2) CBSD vendor generates CSR for CBSD UUT certificate
# 2.a) CBSD vendor is also required to use the modified file opensslcbrs1.cnf to generate the CSR 
# 2.b) in CSR CBSD vendor needs to fill "Common Name" as <FCC ID>:<device serial number> according to WINNF-17-S-0022 
# 3) CBSD vendor send to test lab CSR for CBSD UUT certificate (can be by e-mail as CSR has only public key)
# 4) test lab signs CSR for CBSD UUT with CBSD Manufacturer CA prepared by test lab in previous test lab actions
# 5) test lab send to CBSD vendor the CBSD UUT certificate, CBSD Manufacturer CA and the Root CA (can be by e-mail as these are the public X.509 certificates)  
# in the OpenSSL commands for next steps take note of the -extensions pointing to the correct extension configuration for each certificate type
########################################################################################################################
		 
Step 60) CBSD vendor generates RSA private key for CBSD UUT certificate  

openssl genrsa -out cbsduutpriv.key 2048

Step 61) CBSD vendor generates a CSR for CBSD UUT certificate

openssl req -new -key cbsduutpriv.key -out cbsduutcsr.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:WInnForum CBSD Certificate
Common Name (eg, your name or your server's hostname) []:001415:0001601

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 62) CBSD vendor sends (e-mail) CSR for CBSD UUT certificate to test lab 

Step 63) test lab signs the CSR of CBSD UUT certificate with CBSD Manufacturer CA

openssl x509 -req -in cbsduutcsr.csr -CA cbsdmfrcacert1.pem -CAkey cbsdmfrcapriv.key -CAcreateserial -out cbsduutcert.pem -days 180 -sha256 -extfile /home/opensslcbrs1.cnf -extensions cbsd_cert 

Step 64) verify CBSD UUT certificate parameters 

openssl x509 -in cbsduutcert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 13792926536070694143 (0xbf6a519b438d84ff)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA CBSD Mfr CA9001, CN=WInnForum RSA CBSD Mfr CA
        Validity
            Not Before: Jan 29 09:55:44 2018 GMT
            Not After : Jul 28 09:55:44 2018 GMT
        Subject: C=US, O=Airspan Networks, OU=WInnForum CBSD Certificate, CN=001415:0001601
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:d0:70:35:e0:f5:13:10:83:24:09:04:7a:30:b0:
                    66:e5:24:8f:2a:df:80:e0:95:56:59:53:c4:20:1f:
                    19:8c:04:9d:0c:e7:4e:b0:83:e7:84:42:dd:43:38:
                    79:50:a8:0c:8c:73:c9:0a:fc:4a:9c:22:2f:2b:4e:
                    32:b5:40:60:6b:4a:f8:21:a7:b2:43:ea:b9:0d:b2:
                    0e:ba:21:d7:9b:25:06:41:b1:fc:c1:0e:76:30:7f:
                    b3:3b:8b:8c:23:ae:b3:bf:ff:ac:3d:ac:63:3b:3e:
                    83:10:19:4a:32:97:d4:5c:42:39:e5:f8:68:e7:67:
                    fa:35:e8:41:88:8b:47:56:4a:56:85:d4:a4:fc:a2:
                    e6:05:cc:7b:e8:00:76:6f:bd:fc:33:cf:6e:2a:b7:
                    64:73:f9:c4:84:8f:2b:ec:2b:47:ea:70:c9:cd:94:
                    ae:25:5e:b7:97:74:4e:60:07:92:e7:8f:c4:de:05:
                    75:d8:19:55:ab:26:61:8e:75:8b:bd:c7:86:b3:fb:
                    77:7f:18:f5:74:51:17:6c:72:d1:73:96:be:1f:b8:
                    39:96:d2:4e:a6:14:1f:c2:81:84:64:60:96:56:99:
                    56:a0:f6:5c:18:a5:44:e9:c4:39:de:a9:ab:4e:c3:
                    f8:3d:3a:6a:42:33:2a:22:c0:b9:3f:21:a4:f7:e4:
                    9b:e7
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                69:69:95:5F:43:16:7B:E9:BC:FD:47:DF:2F:B9:C3:C3:AD:E2:21:28
            X509v3 Authority Key Identifier:
                keyid:85:DC:C1:68:39:DD:77:54:8F:74:CA:F9:0D:FE:71:F5:24:8B:8B:F9

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies:
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.3

            X509v3 Subject Alternative Name:
                othername:<unsupported>, othername:<unsupported>
    Signature Algorithm: sha256WithRSAEncryption
         6e:f9:80:ad:d8:2c:d2:f0:65:a4:c2:80:4a:32:42:66:44:89:
         27:51:1e:37:fc:a1:58:b1:cc:e8:0a:85:d0:7f:e1:6c:66:4c:
         95:5c:5e:c1:3a:b4:ee:43:7a:42:ed:60:92:b0:2f:c5:d6:d0:
         d1:34:17:9f:bb:86:7a:dd:b4:ce:df:a4:7f:02:b2:a8:42:4a:
         53:83:03:44:02:26:27:d6:1b:42:17:f2:d7:fa:33:b0:04:18:
         e2:d2:90:d3:52:74:09:d9:2d:f7:2c:c1:da:c7:fc:aa:8b:46:
         f1:ed:bc:c9:0b:5c:84:26:41:4e:56:7c:fc:e2:cc:e7:cf:26:
         16:6a:bf:90:d9:fa:30:eb:d4:88:d8:9e:57:fb:66:16:13:a0:
         20:ef:98:e1:e9:4c:64:d0:8b:6f:c6:63:77:ac:36:4e:23:2a:
         54:7f:b1:e6:e6:68:54:44:cd:b2:d8:54:38:e7:81:c1:c2:0c:
         a9:8f:49:90:cf:b7:79:18:0d:a1:5f:38:8e:71:55:85:74:dc:
         9f:5f:c3:c1:d4:72:e5:7f:81:f7:c4:05:78:79:bc:fe:99:6d:
         51:f7:f3:77:71:d1:8d:2f:92:0d:5b:e8:85:4c:64:c0:dd:3e:
         00:fe:7d:b9:d8:c7:9f:16:db:eb:ae:90:79:4d:49:ca:2c:3b:
         b6:ba:16:55:25:bb:05:d8:5a:be:02:89:68:a1:e3:60:0c:05:
         d9:f6:c2:01:1d:c7:2b:02:94:1c:87:12:d7:0e:b2:96:a9:cf:
         33:26:9d:6a:0f:2b:12:32:67:12:47:9d:cc:36:d2:dc:0e:57:
         fc:d2:8f:4f:3a:74:9d:c4:0f:a9:f4:68:d6:74:ba:22:76:9c:
         0e:ad:1c:3e:a4:f1:f3:0b:aa:83:c7:d3:b6:d2:35:6a:37:95:
         8e:07:76:62:f6:02:3d:c9:14:d6:ea:3b:c6:29:4b:dd:d3:67:
         c2:ad:51:82:6e:86:42:80:82:2d:96:53:f5:30:91:57:23:d9:
         77:7a:b1:c6:60:1a:04:34:be:bd:cd:28:42:fd:91:2b:a7:6a:
         a3:f3:e1:6e:4c:a3:c1:c4:90:a0:ad:5c:0e:c5:ce:7b:27:99:
         38:ec:64:01:c0:00:27:97:23:0e:be:b8:6b:fc:1f:87:3e:1a:
         6c:fa:49:bf:59:d4:8b:49:3a:f1:41:d6:07:55:8d:97:a3:2c:
         9c:3d:65:6c:4e:04:77:2c:3b:20:64:a5:d7:87:b1:fb:3a:b0:
         65:f5:9a:a8:e7:49:c0:6e:c6:4c:42:93:81:67:b1:75:01:09:
         b4:a0:e0:7b:3a:7f:de:f7:c3:e0:05:c5:83:dc:bb:71:1d:2a:
         a7:c6:76:6a:ad:09:3d:33

Step 65) test lab sends (e-mail) to CBSD vendor the CBSD UUT certificate, CBSD Manufacturer CA and the Root CA

######################################################################################################################
# At this point CBSD vendor can load on its CBSD UUT the CBSD UUT certificate, CBSD Manufacturer CA and the Root CA
# according to WINNF-17-S-0022 during TLS message authentication CBSD UUT will send to SAS Harness both the:
# 1) CBSD UUT certificate   
# 2) CBSD Manufacturer CA which signed the CBSD UUT certificate
# it is dependent on implementation of CBSD UUT how to do this, but may be done using a unified PEM file: 
#        -----BEGIN CERTIFICATE-----
#    
#	     < CBSD UUT certificate >
#	
#        -----END CERTIFICATE-----
#        -----BEGIN CERTIFICATE-----
#   
#	      < CBSD Manufacturer CA >
#
#        -----END CERTIFICATE-----    
#######################################################################################################################

###################################################################################################################### 
# Domain Proxy Vendor wants to submit Domain Proxy as UUT for test lab
# 1) Domain Proxy vendor generates RSA private key for Domain Proxy UUT certificate
# 2) Domain Proxy vendor generates CSR for Domain Proxy UUT certificate
# 2.a) Domain Proxy vendor is also required to use the modified file opensslcbrs1.cnf to generate the CSR 
# 2.b) in CSR Domain Proxy vendor needs to fill "Common Name" as <FRN of certified Domain Proxy>:<unique identifier chosen by owner of FRN> according to WINNF-17-S-0022 
# 2.c) FRN is FCC Registration Number.
# 2.d) FRN of each company can be found in https://fccid.io/  (Searchable FCC ID Database)
# 3) Domain Proxy vendor send to test lab CSR for Domain Proxy UUT certificate (can be by e-mail as CSR has only public key)
# 4) test lab signs CSR for Domain Proxy UUT with Domain Proxy CA prepared by test lab in previous test lab actions
# 5) test lab send to Domain Proxy vendor the Domain Proxy UUT certificate, Domain Proxy CA and the Root CA (can be by e-mail as these are the public X.509 certificates)  
# in the OpenSSL commands for next steps take note of the -extensions pointing to the correct extension configuration for each certificate type
########################################################################################################################
	 
Step 66) Domain Proxy vendor generates RSA private key for Domain Proxy UUT certificate  

openssl genrsa -out domainproxyuutpriv.key 2048

Step 67) Domain Proxy vendor generates a CSR for Domain Proxy UUT certificate

openssl req -new -key domainproxyuutpriv.key -out dpuut.csr -config /home/opensslcbrs1.cnf

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
Organization Name (eg, company) [Default Company Ltd]:Airspan Networks
Organizational Unit Name (eg, section) []:WInnForum Domain Proxy Certificate
Common Name (eg, your name or your server's hostname) []:0020242111:netspan001

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

Step 68) Domain Proxy vendor sends (e-mail) CSR for Domain Proxy UUT certificate to test lab 

Step 69) test lab signs the CSR of Domain Proxy UUT certificate with Domain Proxy CA

openssl x509 -req -in dpuut.csr -CA dpcacert1.pem -CAkey domainproxycapriv.key -CAcreateserial -out dpuutcert.pem -days 180 -sha256 -extfile /home/opensslcbrs1.cnf -extensions domain_proxy_cert 

Step 70) verify Domain Proxy UUT certificate parameters 

openssl x509 -in dpuutcert.pem -text -noout

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 11484614561036253526 (0x9f618c185cd83956)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, O=Airspan Networks, OU=RSA Domain Proxy CA9001, CN=WInnForum RSA Domain Proxy CA
        Validity
            Not Before: Jan 29 09:44:49 2018 GMT
            Not After : Jul 28 09:44:49 2018 GMT
        Subject: C=US, O=Airspan Networks, OU=WInnForum Domain Proxy Certificate, CN=0020242111:netspan001
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:da:b7:b7:00:1c:96:80:5b:c6:a4:8e:0a:71:20:
                    04:88:f0:c0:c7:7c:08:f9:58:ed:2f:15:1a:4a:02:
                    dc:c2:33:b2:b8:ad:85:c9:83:22:4f:dc:7d:19:40:
                    05:6f:4c:da:0d:12:29:a3:14:bf:b9:cb:5c:ca:93:
                    7d:15:17:3f:80:84:00:15:83:6d:8f:58:0c:44:d8:
                    11:8e:c1:10:af:6e:ce:4b:ed:f0:16:c3:ce:70:ea:
                    2d:ff:69:c0:68:45:66:0d:d4:1c:7f:6a:a9:fa:3c:
                    93:d2:75:01:f1:52:ab:36:e0:7e:61:b5:fc:e8:9a:
                    f3:bf:ec:8b:a1:2f:2b:0c:b0:0b:3b:90:0f:65:40:
                    e0:ee:03:ea:a4:0c:4e:49:de:e0:df:6d:ee:fa:31:
                    94:e8:74:f6:23:22:27:4f:3e:64:cf:01:6e:93:dc:
                    32:c7:d7:3f:cf:54:8a:7f:84:79:8c:0b:89:74:f7:
                    df:03:f4:d1:eb:8c:f7:91:fe:ea:b3:89:98:ff:bb:
                    77:d1:45:d8:27:51:bb:cc:79:fc:7d:60:d0:c1:97:
                    4c:64:bd:59:be:34:0a:5b:86:ae:8c:15:e0:40:e1:
                    96:71:eb:7b:a2:43:cc:22:f2:d1:4f:ee:1d:2f:dc:
                    f3:63:df:37:4b:b8:e3:cc:a8:f0:c3:13:7c:c7:c1:
                    ab:71
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                42:2B:AA:77:48:41:99:BC:63:B7:77:17:74:0E:11:35:17:7B:F7:4C
            X509v3 Authority Key Identifier:
                keyid:E3:F4:E4:60:DA:92:31:E6:84:76:1A:DD:B7:02:6E:73:F4:1C:05:E9

            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Certificate Policies:
                Policy: 1.3.6.1.4.1.46609.2.1
                Policy: 1.3.6.1.4.1.46609.1.1.4

            X509v3 Subject Alternative Name:
                othername:<unsupported>
    Signature Algorithm: sha256WithRSAEncryption
         3f:3a:a3:78:e6:3a:36:e9:dc:d4:07:c5:df:ad:41:81:67:19:
         30:10:01:79:46:6f:d6:1b:4c:c2:af:1f:a4:aa:76:63:26:4c:
         62:08:a1:d7:3f:d5:27:73:36:f1:27:ca:25:e3:1c:0f:b9:3a:
         62:ea:c4:de:26:39:34:15:8f:89:a0:44:65:4e:d3:72:6a:e2:
         69:70:1a:83:0e:37:c1:fd:59:ab:41:a4:95:8b:ea:8f:af:4d:
         e1:5e:bc:d5:94:18:84:f8:e1:5d:b4:ca:7b:ae:37:4f:a8:ca:
         a4:54:78:aa:43:23:77:15:71:8a:f6:40:cb:ec:ad:9c:07:b6:
         72:21:7f:d9:18:78:7c:11:a4:8e:53:5f:68:02:7a:8b:ba:d7:
         78:dc:87:6a:2f:bf:6c:9c:08:0c:1e:b7:94:a0:d8:ae:30:ed:
         51:59:54:27:00:3f:65:4e:bc:20:d2:96:61:70:36:cb:76:1b:
         be:f8:51:0e:1d:48:dc:ab:b3:6f:db:61:a8:ec:69:98:5b:89:
         16:f5:bb:dc:b3:6a:38:c7:e2:24:bb:ff:f2:f3:b9:6c:44:42:
         07:e7:8d:2e:3d:6b:90:a3:97:b2:98:31:d7:8d:33:8b:c0:92:
         f4:eb:55:cd:15:2b:17:61:12:a7:5b:96:89:22:e6:90:ab:dd:
         12:81:19:d4:99:8f:05:53:ba:52:9d:15:08:9b:d6:64:fd:0a:
         6c:3a:78:a4:16:7a:56:8c:29:35:d0:5b:39:2c:cd:e4:15:bf:
         08:18:ad:15:27:bb:73:ce:f6:85:14:f3:ea:9a:7c:a0:e3:ea:
         ee:51:30:bd:21:3c:c9:01:e3:16:ad:2a:96:ca:60:e2:83:0a:
         26:93:8b:39:c1:45:d7:1b:09:9d:9a:d2:af:7a:bf:0d:d6:59:
         8d:db:10:e8:29:3d:d4:8b:36:55:99:fa:d2:89:a4:af:ae:68:
         97:67:4c:fe:ff:79:f8:a8:bf:71:41:5d:bf:29:a0:23:ce:c0:
         d5:d1:c6:1b:6b:8f:07:6a:a3:1c:b5:2f:b7:ee:07:57:2d:61:
         07:72:4c:62:3b:d9:17:de:49:93:0b:ab:d3:dc:e5:7c:97:8a:
         cc:b3:1d:29:e6:1f:d3:1d:be:ca:aa:53:79:65:34:87:26:64:
         a2:dd:66:e2:a5:c1:48:e8:bf:a3:06:c3:f1:90:f2:f9:2f:1d:
         b9:81:97:84:0b:7a:18:93:08:fa:c8:0e:69:22:5b:9c:13:c8:
         11:1f:e5:cb:f3:c1:10:c0:fa:8f:3f:8d:d6:3e:41:d0:08:27:
         74:de:99:76:93:b3:32:06:96:0e:7f:cf:aa:ed:ea:e7:fd:33:
         8b:8e:07:e7:dc:6b:98:4e

Step 71) test lab sends (e-mail) to Domain Proxy vendor the Domain Proxy UUT certificate, Domain Proxy CA and Root CA

######################################################################################################################
# At this point Domain Proxy vendor can load on its Domain Proxy UUT the Domain Proxy UUT certificate, Domain Proxy CA and Root CA
# according to WINNF-17-S-0022 during TLS message authentication Domain Proxy UUT will send to SAS Harness both the:
# 1) Domain Proxy UUT certificate   
# 2) Domain Proxy CA which signed the Domain Proxy UUT certificate
# it is dependent on implementation of Domain Proxy UUT how to do this, but may be done using a unified PEM file: 
#        -----BEGIN CERTIFICATE-----
#    
#	     < Domain Proxy UUT certificate >
#	
#        -----END CERTIFICATE-----
#        -----BEGIN CERTIFICATE-----
#   
#	      < Domain Proxy CA >
#
#        -----END CERTIFICATE-----    
#######################################################################################################################


######################################################################################################################
######################################################################################################################
######################################################################################################################
# Below is opensslcbrs1.cnf to use by test lab and CBSD/Domain Proxy vendor for X.509 RSA certificate generation according to WINNF-17-S-0022


##################################################################
# Copyright 2018 CBSD Project Authors. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
#################################################################
# OpenSSL configuration file for X.509 RSA certificates for test labs for CBRS FCC part 96 testing
# used with openssl-1.0.1e-57.el6.x86_64
# Version 1.2 1-March-2018
# Idan Raz iraz@airspan.com
##################################################################

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .
RANDFILE		= $ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file		= $ENV::HOME/.oid
oid_section		= new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		= 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

####################################################################
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]

dir		= /etc/pki/CA		# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
crl_dir		= $dir/crl		# Where the issued crl are kept
database	= $dir/index.txt	# database index file.
#unique_subject	= no			# Set to 'no' to allow creation of
					# several ctificates with same subject.
new_certs_dir	= $dir/newcerts		# default place for new certs.

certificate	= $dir/cacert.pem 	# The CA certificate
serial		= $dir/serial 		# The current serial number
crlnumber	= $dir/crlnumber	# the current crl number
					# must be commented out to leave a V1 CRL
crl		= $dir/crl.pem 		# The current CRL
private_key	= $dir/private/cakey.pem# The private key
RANDFILE	= $dir/private/.rand	# private random number file

x509_extensions	= usr_cert		# The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt 	= ca_default		# Subject Name options
cert_opt 	= ca_default		# Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions	= crl_ext

default_days	= 365			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= default		# use public key default MD
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_match

# For the CA policy
[ policy_match ]
countryName		= match
stateOrProvinceName	= optional
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 2048
default_md		= sha384
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes
x509_extensions	= v3_ca	# The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options. 
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only

# req_extensions = v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= XX
countryName_min			= 2
countryName_max			= 2

#stateOrProvinceName		= State or Province Name (full name)
#stateOrProvinceName_default	= Default Province

#localityName			= Locality Name (eg, city)
#localityName_default	= Default City

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= Default Company Ltd

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= World Wide Web Pty Ltd

organizationalUnitName		= Organizational Unit Name (eg, section)
#organizationalUnitName_default	=

commonName			= Common Name (eg, your name or your server\'s hostname)
commonName_max			= 64

#emailAddress			= Email Address
#emailAddress_max		= 64

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

#unstructuredName		= An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This is required for TSA certificates.
# extendedKeyUsage = critical,timeStamping

[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = critical, CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF
################################################

[ cbrs_domain_proxy_ca ]

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, cRLSign, keyCertSign
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.5
subjectAltName = DNS:domainproxyca.testharness.cbsd.winnf.github.com

####################################################################

[ cbrs_sas_ca ]

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, cRLSign, keyCertSign
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.5
subjectAltName = DNS:sasproivderca.testharness.cbsd.winnf.github.com 

#####################################################################

[ cbrs_cbsd_mfr_ca ]

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:1
keyUsage = critical, cRLSign, keyCertSign
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.5
subjectAltName = DNS:cbsdmfrca.testharness.cbsd.winnf.github.com

####################################################################

[ professional_installer_ca ]

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, cRLSign, keyCertSign
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.5
subjectAltName = DNS:professionalinstallerca.testharness.cbsd.winnf.github.com

######################################################################

[ sas_cert ]

subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage = critical, digitalSignature, keyEncipherment
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.1
subjectAltName = DNS:mocksas.testharness.cbsd.winnf.github.com, otherName:1.3.6.1.4.1.46609.1.6;UTF8:MockSAS FRN

######################################################################

[ sas_cert_with_crl ]

subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage = critical, digitalSignature, keyEncipherment
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.1
subjectAltName = DNS:sascertcrl.testharness.cbsd.winnf.github.com, otherName:1.3.6.1.4.1.46609.1.6;UTF8:MockSAS FRN
authorityInfoAccess = OCSP;URI:http://ocsp.testharness.cbsd.winnf.github.com/
crlDistributionPoints=URI:http://testharness.cbsd.winnf.com/crlserver.crl

######################################################################

[ cbsd_cert ]

subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage = critical, digitalSignature, keyEncipherment 
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.3
subjectAltName = otherName:1.3.6.1.4.1.46609.1.4;UTF8:FCC ID CBSD UUT,otherName:1.3.6.1.4.1.46609.1.5;UTF8:Serial CBSD UUT


######################################################################

[ domain_proxy_cert ]

subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage = critical, digitalSignature, keyEncipherment
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.4
subjectAltName = otherName:1.3.6.1.4.1.46609.1.6;UTF8:Domain Proxy UUT FRN

#####################################################################

[ cpi_cert ]

subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage = critical, digitalSignature, keyEncipherment
certificatePolicies = 1.3.6.1.4.1.46609.2.1, 1.3.6.1.4.1.46609.1.1.2
subjectAltName = otherName:1.3.6.1.4.1.46609.1.7;UTF8:CPI

####################################################################
[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1	# the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
dir		= ./demoCA		# TSA root directory
serial		= $dir/tsaserial	# The current serial number (mandatory)
crypto_device	= builtin		# OpenSSL engine to use for signing
signer_cert	= $dir/tsacert.pem 	# The TSA signing certificate
					# (optional)
certs		= $dir/cacert.pem	# Certificate chain to include in reply
					# (optional)
signer_key	= $dir/private/tsakey.pem # The TSA private key (optional)

default_policy	= tsa_policy1		# Policy if request did not specify it
					# (optional)
other_policies	= tsa_policy2, tsa_policy3	# acceptable policies (optional)
digests		= md5, sha1		# Acceptable message digests (mandatory)
accuracy	= secs:1, millisecs:500, microsecs:100	# (optional)
clock_precision_digits  = 0	# number of digits after dot. (optional)
ordering		= yes	# Is ordering defined for timestamps?
				# (optional, default: no)
tsa_name		= yes	# Must the TSA name be included in the reply?
				# (optional, default: no)
ess_cert_id_chain	= no	# Must the ESS cert id chain be included?
				# (optional, default: no)




		 
